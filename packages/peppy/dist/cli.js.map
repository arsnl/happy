{"version":3,"sources":["../src/cli.ts","../package.json","../src/commands/install.ts","../src/utils/helpers.ts","../src/utils/logger.ts","../src/utils/prompt.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from \"commander\";\nimport { bold, cyan, red, yellow } from \"kleur\";\nimport checkForUpdate from \"update-check\";\nimport packageInfo from \"../package.json\";\nimport { makeInstallCommand } from \"./commands/install\";\nimport { logger } from \"./utils/logger\";\n\nconst update = checkForUpdate(packageInfo).catch(() => null);\n\nconst notifyUpdate = async () => {\n  try {\n    const result = await update;\n    if (result && result.latest) {\n      logger.log(\n        \"\",\n        yellow(\n          bold(`${packageInfo.name} v${packageInfo.version} is available!`),\n        ),\n        `You can update ${packageInfo.name} by running: ${cyan(\n          `npm i -g ${packageInfo.name}`,\n        )}`,\n        \"\",\n      );\n    }\n    process.exit();\n  } catch (error) {\n    // ignore error\n  }\n};\n\nconst run = async () => {\n  const program = new Command()\n    .version(packageInfo.version)\n    .addCommand(await makeInstallCommand());\n\n  program.parseAsync(process.argv);\n};\n\nrun().catch(async (error) => {\n  logger.log();\n  if (error.command) {\n    logger.error(`  ${cyan(error.command)} has failed.`);\n  } else {\n    logger.error(red(\"Unexpected error. Please report it as a bug:\"), error);\n  }\n\n  logger.log();\n\n  await notifyUpdate();\n\n  process.exit(1);\n});\n","{\n  \"name\": \"peppy\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Peppy CLI - Brilliant ESLint configurations for happier developers\",\n  \"keywords\": [\n    \"peppy\",\n    \"cli\",\n    \"eslint\",\n    \"config\",\n    \"prettier\"\n  ],\n  \"homepage\": \"https://github.com/arsnl/peppy\",\n  \"bugs\": {\n    \"url\": \"https://github.com/arsnl/peppy/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/arsnl/peppy\",\n    \"directory\": \"packages/peppy\"\n  },\n  \"author\": {\n    \"name\": \"Mark Arseneault\",\n    \"email\": \"mark@arsnl.dev\",\n    \"url\": \"https://arsnl.dev\"\n  },\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"peppy\": \"./dist/cli.js\"\n  },\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"format\": \"prettier --check .\",\n    \"lint\": \"eslint .\",\n    \"type\": \"tsc --noEmit\",\n    \"fix\": \"prettier --write --log-level warn . && npm run lint -- --fix\",\n    \"clean\": \"rimraf dist .turbo node_modules\"\n  },\n  \"dependencies\": {\n    \"commander\": \"10.0.0\",\n    \"comment-json\": \"4.2.3\",\n    \"execa\": \"5.1.1\",\n    \"gradient-string\": \"2.0.2\",\n    \"kleur\": \"4.1.5\",\n    \"ora\": \"5.4.1\",\n    \"prompts\": \"2.4.2\",\n    \"rimraf\": \"4.4.1\",\n    \"semver\": \"7.3.8\",\n    \"update-check\": \"1.5.4\"\n  },\n  \"devDependencies\": {\n    \"@types/gradient-string\": \"^1.1.2\",\n    \"@types/prompts\": \"^2.4.4\",\n    \"@types/semver\": \"^7.5.0\",\n    \"typescript\": \"5.1.6\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\",\n    \"npm\": \">=5.2.0\"\n  }\n}\n","import { Command, Option } from \"commander\";\nimport { bold, cyan } from \"kleur\";\nimport prompts from \"prompts\";\nimport {\n  addEditorConfigFile,\n  addESLintConfigurationFile,\n  addPkgJsonScripts,\n  addVsCodeWorkspaceSettings,\n  installDependencies,\n  isPackageInDependencies,\n  logBanner,\n} from \"../utils/helpers\";\nimport { logger } from \"../utils/logger\";\nimport {\n  handlePromptCancel,\n  promptCheckCWDPermission,\n  promptCheckGitStatus,\n  promptCheckNodeVersion,\n  promptCheckNPMVersion,\n  promptCheckPackageJSON,\n  promptCheckPackageManager,\n} from \"../utils/prompt\";\n\nexport const makeInstallCommand = async () => {\n  const program = new Command(\"install\");\n\n  program\n    .description(\"Peppy installer\")\n    .addOption(\n      new Option(\"--pm <pm>\", \"package manager\").choices([\n        \"npm\",\n        \"yarn\",\n        \"pnpm\",\n      ]),\n    )\n    .addOption(\n      new Option(\"--prod\", \"install the packages in dependencies\").default(\n        false,\n      ),\n    )\n    .addOption(\n      new Option(\"--cwd <cwd>\", \"working directory to use\").default(\n        process.cwd(),\n      ),\n    )\n    .addOption(new Option(\"-y, --yes\", \"use default options\").default(false))\n    .action(async ({ pm, prod, cwd, yes }) => {\n      let packageManager = pm;\n\n      logBanner();\n      await promptCheckNodeVersion({ cwd });\n      await promptCheckNPMVersion({ cwd });\n      await promptCheckCWDPermission({ cwd });\n      await promptCheckGitStatus({ cwd });\n\n      packageManager = await promptCheckPackageManager({\n        cwd,\n        packageManager,\n      });\n\n      await promptCheckPackageJSON({ cwd, packageManager });\n\n      const isTypeScriptInstalled = await isPackageInDependencies({\n        packageName: \"typescript\",\n        cwd,\n      });\n\n      const { answerAddPkgJsonScripts = undefined } = !yes\n        ? await prompts(\n            {\n              type: \"confirm\",\n              name: \"answerAddPkgJsonScripts\",\n              message: \"Do you want to add the package.json scripts?\",\n              initial: true,\n            },\n            { onCancel: handlePromptCancel },\n          )\n        : {};\n\n      if (!yes) {\n        answerAddPkgJsonScripts\n          ? logger.log(\n              cyan(\n                `Superb! üëè The scripts ${bold(\"lint\")}, ${bold(\"format\")} ${\n                  isTypeScriptInstalled\n                    ? `${bold(\"typecheck\")} and ${bold(\"fix\")}`\n                    : `and ${bold(\"fix\")}`\n                } gonna be added.`,\n              ),\n            )\n          : logger.log(\n              cyan(\"That's too bad! üôÅ Those scripts are super useful.\"),\n              cyan(\n                \"You can always run the init command again and select them later if you change your mind.\",\n              ),\n            );\n      }\n\n      const { answerAddESLintConfigurationFile = undefined } = !yes\n        ? await prompts(\n            {\n              type: \"confirm\",\n              name: \"answerAddESLintConfigurationFile\",\n              message: \"Do you want to add the ESLint configuration file?\",\n              initial: true,\n            },\n            { onCancel: handlePromptCancel },\n          )\n        : {};\n\n      if (!yes) {\n        answerAddESLintConfigurationFile\n          ? logger.log(\n              cyan(\n                `Awesome! üòç I'll generate a configuration file based on your project packages.`,\n              ),\n            )\n          : logger.log(\n              cyan(\n                \"No worries. üòå You can always run the init command again and add them at a later time.\",\n              ),\n            );\n      }\n\n      const { answerAddVsCodeWorkspaceSettings = undefined } = !yes\n        ? await prompts(\n            {\n              type: \"confirm\",\n              name: \"answerAddVsCodeWorkspaceSettings\",\n              message: \"Do you want to add the VS Code workspace settings?\",\n              initial: true,\n            },\n            { onCancel: handlePromptCancel },\n          )\n        : {};\n\n      if (!yes) {\n        answerAddVsCodeWorkspaceSettings\n          ? logger.log(\n              cyan(\n                `Noted! üìù If you have existing workspace settings, they will be merged together.`,\n              ),\n            )\n          : logger.log(\n              cyan(\n                \"Aww, it's a shame. üòï Don't worry, you can always run the init command again and add them later.\",\n              ),\n            );\n      }\n\n      const { answerAddEditorConfigFile = undefined } = !yes\n        ? await prompts(\n            {\n              type: \"confirm\",\n              name: \"answerAddEditorConfigFile\",\n              message: \"Do you want to add the .editorconfig file?\",\n              initial: true,\n            },\n            { onCancel: handlePromptCancel },\n          )\n        : {};\n\n      if (!yes) {\n        answerAddVsCodeWorkspaceSettings\n          ? logger.log(cyan(`You made a smart decision. üß†`))\n          : logger.log(\n              cyan(\n                \"It's a bummer! üòø But no need to despair, you can always run the init command again and add it later.\",\n              ),\n            );\n      }\n\n      !yes &&\n        logger.log(\n          \"\",\n          cyan(\n            \"Alright. I have everything I need. Let's start the installations then! üíÉ\",\n          ),\n        );\n\n      logger.log(\"\");\n\n      await installDependencies({ packageManager, cwd, prod });\n\n      if (yes || answerAddPkgJsonScripts) {\n        await addPkgJsonScripts({ cwd });\n      }\n      if (yes || answerAddESLintConfigurationFile) {\n        await addESLintConfigurationFile({ cwd });\n      }\n      if (yes || answerAddVsCodeWorkspaceSettings) {\n        await addVsCodeWorkspaceSettings({ cwd });\n      }\n      if (yes || answerAddEditorConfigFile) {\n        await addEditorConfigFile({ cwd });\n      }\n\n      logger.log(\n        \"\",\n        cyan(\"üéâ Hooray! Installation is complete. üéâ\"),\n        cyan(\n          \"You're now ready to dive into your project with full force and enjoy a seamless development experience.\",\n        ),\n      );\n\n      logger.log(\n        \"\",\n        cyan(\"Next steps:\"),\n        cyan(\" - Install the recommended VS Code extensions\"),\n        cyan(` - Run ${bold(\"npm run fix\")} to clean your project`),\n        cyan(\" - Add automated validation (e.g. Github actions)\"),\n      );\n    });\n\n  return program;\n};\n","/* eslint-disable no-empty */\nimport jsonc from \"comment-json\";\nimport execa from \"execa\";\nimport fs from \"fs\";\nimport gradient from \"gradient-string\";\nimport { green } from \"kleur\";\nimport ora from \"ora\";\nimport nodePath from \"path\";\nimport { sync as rimrafSync } from \"rimraf\";\nimport { clean } from \"semver\";\nimport packageInfo from \"../../package.json\";\nimport { logger } from \"./logger\";\n\n/**\n * Check if a path exist\n * @param {Object} options - options\n * @param {string} options.path - the path to check\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isPathExists = async ({ path = process.cwd(), cwd = \"\" } = {}) => {\n  try {\n    await fs.promises.access(\n      nodePath.join(cwd, path),\n      (fs.constants || fs).F_OK,\n    );\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Check if a path is writeable\n * @param {Object} options - options\n * @param {string} options.path - the path to check\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isPathWriteable = async ({ path = process.cwd() } = {}) => {\n  try {\n    await fs.promises.access(path, (fs.constants || fs).W_OK);\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Gets paths that exists in a folder and match a list of paths\n * @param {Object} options - options\n * @param {Array<string>} options.paths - a list of paths to match\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to a list of matching paths\n */\nexport const getExistingPaths = async ({\n  paths = [],\n  cwd = process.cwd(),\n}: { paths?: string[]; cwd?: string } = {}) => {\n  const dirPaths = await fs.promises.readdir(cwd);\n\n  return dirPaths.filter((currentPath) => paths.includes(currentPath));\n};\n\n/**\n * Read a file\n * @param {Object} options - options\n * @param {string} options.file - the file to read\n * @param {string} options.json - convert data to json\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves the data in the file to read\n */\nexport const readFile = async ({\n  file = \"\",\n  json,\n  cwd = process.cwd(),\n}: { file?: string; json?: boolean; cwd?: string } = {}) => {\n  const filePath = nodePath.join(cwd, file);\n\n  const data = await fs.promises.readFile(filePath, \"utf8\");\n\n  return json ? JSON.parse(data) : data;\n};\n\n/**\n * Write a file\n * @param {Object} options - options\n * @param {string} options.file - the file to write\n * @param {string} options.data - the data to write in the file\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const writeFile = async ({\n  file = \"\",\n  data = \"\",\n  cwd = process.cwd(),\n  format = true,\n} = {}) => {\n  const filePath = nodePath.join(cwd, file);\n  const dirname = nodePath.dirname(filePath);\n\n  // if the path doesn't exist, create the folders\n  if (!(await isPathExists({ path: dirname }))) {\n    await fs.promises.mkdir(dirname, {\n      recursive: true,\n    });\n  }\n\n  // if the file already exist, remove it\n  if (await isPathExists({ path: filePath })) {\n    await fs.promises.rm(filePath);\n  }\n\n  // write the file\n  await fs.promises.writeFile(filePath, data);\n\n  // format the file\n  if (format) {\n    await execa(\"npx\", [\"prettier\", \"--write\", filePath]);\n  }\n};\n\n/**\n * Check if the current working directory is in a Git repository\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isInGitRepository = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    await execa(\"git\", [\"rev-parse\", \"--is-inside-work-tree\"], {\n      cwd,\n      stdio: \"ignore\",\n    });\n\n    return true;\n  } catch (_) {}\n\n  return false;\n};\n\n/**\n * Check if the current working directory is in a Mercurial repository\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isInMercurialRepository = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    await execa(\"hg\", [\"--cwd\", \".\", \"root\"], {\n      cwd,\n      stdio: \"ignore\",\n    });\n\n    return true;\n  } catch (_) {}\n\n  return false;\n};\n\n/**\n * Check if the current working directory has Git changes not commited\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const hasGitChanges = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    if (await isInGitRepository({ cwd })) {\n      const { stdout } = await execa(\"git\", [\"status\", \"--porcelain\"], { cwd });\n\n      return !!stdout;\n    }\n  } catch (_) {}\n\n  return false;\n};\n\n/**\n * Check if the current working directory has Mercurial changes not commited\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const hasMercurialChanges = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    if (await isInMercurialRepository({ cwd })) {\n      const { stdout } = await execa(\"hg\", [\"status\"], { cwd });\n\n      return !!stdout;\n    }\n  } catch (_) {}\n\n  return false;\n};\n\n/**\n * Remove all the ESLint configurations files and properties and replace it by a single .eslintrc.js/.cjs file\n * with a calculated configuration based on the existing packages in the project\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const addESLintConfigurationFile = async ({\n  cwd = process.cwd(),\n} = {}) => {\n  const spinner = ora(`Adding ESLint configuration file`).start();\n\n  const eslintFiles = await getExistingPaths({\n    paths: [\n      \".eslintrc.js\",\n      \".eslintrc.cjs\",\n      \".eslintrc.mjs\",\n      \".eslintrc.yaml\",\n      \".eslintrc.yml\",\n      \".eslintrc.json\",\n    ],\n    cwd,\n  });\n\n  // Remove ESLint files\n  eslintFiles.forEach((file) => {\n    rimrafSync(nodePath.join(cwd, file));\n  });\n\n  // Remove ESLint configuration property\n  const { eslintConfig, ...pkgRest } = await readPkg({ cwd });\n  await writePkg({ data: pkgRest, cwd });\n\n  // Calculating the configuration\n  const isNextInstalled = await isPackageInDependencies({\n    packageName: \"next\",\n    cwd,\n  });\n  const isReactInstalled = await isPackageInDependencies({\n    packageName: \"react\",\n    cwd,\n  });\n  const isTailwindcssInstalled = await isPackageInDependencies({\n    packageName: \"tailwindcss\",\n    cwd,\n  });\n  const isJestInstalled = await isPackageInDependencies({\n    packageName: \"jest\",\n    cwd,\n  });\n  const isTypeScriptInstalled = await isPackageInDependencies({\n    packageName: \"typescript\",\n    cwd,\n  });\n  const isPkgTypeModule = pkgRest.type && pkgRest.type === \"module\";\n\n  const configuration = {\n    extends: [\n      \"peppy\",\n      isNextInstalled && \"peppy/next\",\n      isReactInstalled && !isNextInstalled && \"peppy/react\",\n      isTailwindcssInstalled && \"peppy/tailwindcss\",\n      isJestInstalled && \"peppy/jest\",\n    ].filter((extend) => !!extend),\n    ...(isTypeScriptInstalled\n      ? {\n          parserOptions: {\n            tsconfigRootDir: \"__dirname\",\n            project: \"./tsconfig.json\",\n          },\n        }\n      : {}),\n  };\n\n  // Writing the configuration\n  await writeFile({\n    file: isPkgTypeModule ? \".eslintrc.cjs\" : \".eslintrc.js\",\n    cwd,\n    data: `/** @type {import(\"eslint\").Linter.Config} */\\nmodule.exports = ${JSON.stringify(\n      configuration,\n    )}`.replace('\"__dirname\"', \"__dirname\"),\n  });\n\n  spinner.succeed(`ESLint configuration file added`);\n};\n\n/**\n * Create a package.json file\n * @param {Object} options - options\n * @param {string} options.packageManager - the package manager to use (npm, yarn or pnpm)\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const createPkg = async ({\n  packageManager = \"npm\",\n  cwd = process.cwd(),\n} = {}) => {\n  const args = [\"init\"];\n\n  try {\n    await execa(packageManager, args, { cwd, stdio: \"inherit\" });\n  } catch (error) {\n    logger.error(`Cannot execute '${packageManager} ${args.join(\" \")}'`);\n    throw error;\n  }\n};\n\n/**\n * Read a package.json file\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Object>} - a Promise which resolves to the content of the package.json\n */\nexport const readPkg = async ({ cwd = process.cwd() } = {}) =>\n  readFile({ file: \"package.json\", cwd, json: true });\n\n/**\n * Write in a package.json file\n * @param {Object} options - options\n * @param {Object} options.data - the data to write\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const writePkg = async ({ data = {}, cwd = process.cwd() } = {}) =>\n  writeFile({ file: \"package.json\", cwd, data: JSON.stringify(data, null, 2) });\n\n/**\n * Returns the version of Node.js installed in the current directory\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<string>} - The version of node installed.\n */\nexport const getNodeVersionInstalled = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    const { stdout } = await execa(\"node\", [\"--version\"], { cwd });\n\n    return clean(stdout);\n  } catch {\n    return \"\";\n  }\n};\n\n/**\n * Returns the version of npm installed in the current directory\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<string>} - The version of npm installed.\n */\nexport const getNpmVersionInstalled = async ({ cwd = process.cwd() } = {}) => {\n  try {\n    const { stdout } = await execa(\"npm\", [\"--version\"], { cwd });\n\n    return clean(stdout);\n  } catch {\n    return null;\n  }\n};\n\n/**\n * Check if npm is installed\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isNpmInstalled = async () => {\n  try {\n    await execa(\"npm\", [\"--version\"], { stdio: \"ignore\" });\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Check if yarn is installed\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isYarnInstalled = async () => {\n  try {\n    await execa(\"yarn\", [\"--version\"], { stdio: \"ignore\" });\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Check if pnpm is installed\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isPnpmInstalled = async () => {\n  try {\n    await execa(\"pnpm\", [\"--version\"], { stdio: \"ignore\" });\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Checks if npm, yarn, and pnpm are installed on the user's machine\n * and detect wich is the recommended package manager based on the presence of lock file\n */\nexport const getPackageManagersChoices = async ({\n  cwd = process.cwd(),\n}: { cwd?: string } = {}) => {\n  const packageManagers = {\n    npm: {\n      title: \"npm\",\n      isInstalled: await isNpmInstalled(),\n      hasLockfile: await isPathExists({ path: \"package-lock.json\", cwd }),\n    },\n    pnpm: {\n      title: \"pnpm\",\n      isInstalled: await isPnpmInstalled(),\n      hasLockfile: await isPathExists({ path: \"pnpm-lock.yaml\", cwd }),\n    },\n    yarn: {\n      title: \"yarn\",\n      isInstalled: await isYarnInstalled(),\n      hasLockfile: await isPathExists({ path: \"yarn.lock\", cwd }),\n    },\n  };\n\n  type PackageManagerKey = keyof typeof packageManagers;\n\n  let recommended = \"\";\n\n  return (Object.keys(packageManagers) as PackageManagerKey[]).reduce<\n    { title: string; value: PackageManagerKey }[]\n  >((acc, current) => {\n    const packageManager = packageManagers[current];\n    const choice = packageManager.isInstalled\n      ? {\n          title: packageManager.title,\n          value: current,\n        }\n      : false;\n\n    if (\n      !recommended &&\n      packageManager.isInstalled &&\n      packageManager.hasLockfile\n    ) {\n      recommended = current;\n    }\n\n    return choice && recommended === current\n      ? [\n          {\n            ...choice,\n            title: `${choice.title} (${green(\"recommended\")})`,\n          },\n          ...acc,\n        ]\n      : choice\n      ? [...acc, choice]\n      : acc;\n  }, []);\n};\n\n/**\n * Check the package manager used to execute the current process\n * @returns {string} yarn, pnpm or npm\n */\nexport const getUserPkgManager = () => {\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith(\"yarn\")) {\n      return \"yarn\";\n    }\n    if (userAgent.startsWith(\"pnpm\")) {\n      return \"pnpm\";\n    }\n    return \"npm\";\n  }\n  // If no user agent is set, assume npm\n  return \"npm\";\n};\n\n/**\n * Check if package is in package.json dependencies\n * @param {Object} options - options\n * @param {string} options.packageName - the name of the package\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<boolean>} - a Promise which resolves to a boolean\n */\nexport const isPackageInDependencies = async ({\n  packageName = \"\",\n  cwd = process.cwd(),\n}: { packageName?: string; cwd?: string } = {}) => {\n  const { dependencies = {}, devDependencies = {} } = await readPkg({\n    cwd,\n  });\n\n  return !!(dependencies[packageName] || devDependencies[packageName]);\n};\n\n/**\n * Install dependencies\n * @param {Object} options - options\n * @param {string} options.packageManager - the package manager to use (npm, yarn or pnpm)\n * @param {string} options.cwd - the current working directory\n * @param {string} options.prod - save to dependencies (default to devDependencies)\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const installDependencies = async ({\n  packageManager = \"npm\",\n  cwd = process.cwd(),\n  prod = false,\n} = {}) => {\n  const spinner = ora(`Installing package dependencies`).start();\n  const { version } = packageInfo;\n\n  const dependencies = [\n    (await isPackageInDependencies({\n      packageName: \"eslint\",\n      cwd,\n    }))\n      ? \"\"\n      : \"eslint\",\n    (await isPackageInDependencies({\n      packageName: \"prettier\",\n      cwd,\n    }))\n      ? \"\"\n      : \"prettier\",\n    `eslint-config-peppy@^${version}`,\n  ].filter((dependencie) => !!dependencie);\n\n  const args = [\"add\", ...dependencies, prod ? \"-S\" : \"-D\"];\n\n  try {\n    await execa(packageManager, args, { cwd });\n    spinner.succeed(`Package dependencies installed`);\n  } catch (error) {\n    spinner.fail(`A problem occurs while installing the package dependencies.`);\n    logger.error(`Cannot execute '${packageManager} ${args.join(\" \")}'`);\n    throw error;\n  }\n};\n\n/**\n * Add the scripts to the package.json file\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const addPkgJsonScripts = async ({ cwd = process.cwd() } = {}) => {\n  const spinner = ora(`Adding the package.json scripts`).start();\n  const packageJson = await readPkg({ cwd });\n  const currentScripts = packageJson.scripts || {};\n  const isTypeScriptInstalled = await isPackageInDependencies({\n    packageName: \"typescript\",\n    cwd,\n  });\n\n  const RECOMMENDED_SCRIPTS = {\n    lint: \"eslint .\",\n    format: \"prettier --check .\",\n    ...(isTypeScriptInstalled ? { typecheck: \"tsc --noEmit\" } : {}),\n    fix: \"prettier --write --log-level warn . && npm run lint -- --fix\",\n  };\n\n  await writePkg({\n    data: {\n      ...packageJson,\n      scripts: { ...currentScripts, ...RECOMMENDED_SCRIPTS },\n    },\n    cwd,\n  });\n\n  spinner.succeed(`Package.json scripts added`);\n};\n\n/**\n * Add the VS Code workspace settings\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const addVsCodeWorkspaceSettings = async ({\n  cwd = process.cwd(),\n} = {}) => {\n  const spinner = ora(`Adding VS Code workspace settings`).start();\n\n  const extensionsTemplate = await readFile({\n    file: \"../templates/.vscode/extensions.json\",\n    cwd: __dirname,\n  });\n  const parsedExtensionsTemplate = jsonc.parse(extensionsTemplate);\n  const settingsTemplate = await readFile({\n    file: \"../templates/.vscode/settings.json\",\n    cwd: __dirname,\n  });\n  const parsedSettingsTemplate = jsonc.parse(settingsTemplate);\n\n  let settings = {};\n  let extensions = {};\n\n  if (await isPathExists({ path: \".vscode/settings.json\", cwd })) {\n    const data = await readFile({\n      file: \".vscode/settings.json\",\n      cwd,\n    });\n    settings = jsonc.parse(data) || settings;\n  }\n  if (await isPathExists({ path: \".vscode/extensions.json\", cwd })) {\n    const data = await readFile({\n      file: \".vscode/extensions.json\",\n      cwd,\n    });\n    extensions = jsonc.parse(data) || extensions;\n  }\n\n  settings = jsoncDeepAssign(settings, parsedSettingsTemplate);\n  extensions = jsoncDeepAssign(extensions, parsedExtensionsTemplate);\n\n  await writeFile({\n    file: \".vscode/extensions.json\",\n    cwd,\n    data: jsonc.stringify(extensions, null, 2),\n  });\n\n  await writeFile({\n    file: \".vscode/settings.json\",\n    cwd,\n    data: jsonc.stringify(settings, null, 2),\n  });\n\n  spinner.succeed(`VS Code workspace settings added`);\n};\n\n/**\n * Add the .editorconfig file\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const addEditorConfigFile = async ({ cwd = process.cwd() } = {}) => {\n  const spinner = ora(`Adding the .editorconfig file`).start();\n\n  const fileTemplate = await readFile({\n    file: \"../templates/.editorconfig\",\n    json: false,\n    cwd: __dirname,\n  });\n\n  await writeFile({\n    file: \".editorconfig\",\n    cwd,\n    data: fileTemplate,\n    format: false, // .editorconfig is not supported by prettier\n  });\n\n  spinner.succeed(`.editorconfig file added`);\n};\n\n/**\n * Check if an item is an object\n * @param {Any} item - the item to check\n * @returns {boolean} - true if it's an object\n */\nexport const isObject = (item: any): item is object =>\n  item && typeof item === \"object\" && !Array.isArray(item);\n\n/**\n * Check if an item is an array\n * @param {Any} item - the item to check\n * @returns {boolean} - true if it's an array\n */\nexport const isArray = (item: any): item is unknown[] =>\n  item && typeof item === \"object\" && Array.isArray(item);\n\ntype JsonObject = { [key: string]: any };\ntype JsonValue = string | number | boolean | null | JsonObject | JsonValue[];\n\n/**\n * Merge deep source data in JSON with comment into a target JSON with comment\n * @param {Array|Object} target - the target where the assign will be applied\n * @param {Array|Object} source - the source data to assign on the target\n * @returns {Array|Object} - the target with the assign applied\n */\nexport const jsoncDeepAssign = <T extends JsonValue>(target: T, source: T) => {\n  const _take = (item: unknown, KeyToTake: any) => {\n    if (!isObject(item) && !isArray(item)) {\n      return item;\n    }\n\n    const keys = isObject(item) ? Object.keys(item) : item;\n    const clone = isObject(item)\n      ? jsonc.assign({}, item)\n      : new jsonc.CommentArray().concat(item);\n\n    keys.forEach((key) => {\n      if (key !== KeyToTake) {\n        delete clone[key as keyof typeof clone];\n      }\n    });\n\n    return clone;\n  };\n\n  const _arrayAssign = (aTarget: JsonValue[], aSource: JsonValue[]) => {\n    const clone = new jsonc.CommentArray().concat(aTarget);\n\n    aSource.forEach((value: any) => {\n      let i;\n      while ((i = clone.indexOf(value)) !== -1) {\n        clone.splice(i, 1);\n      }\n    });\n\n    return new jsonc.CommentArray().concat(clone).concat(aSource);\n  };\n\n  if (\n    !source ||\n    (!(isArray(source) && isArray(target)) &&\n      !(isObject(source) && isObject(target)))\n  ) {\n    return target;\n  }\n\n  const keys = isObject(source) ? Object.keys(source) : source;\n  let clone: any = isObject(target)\n    ? jsonc.assign({}, target)\n    : new jsonc.CommentArray().concat(target);\n\n  keys.forEach((key) => {\n    if (isObject(source[key as keyof unknown])) {\n      if (!clone[key]) {\n        clone = jsonc.assign(clone, _take(source, key));\n      }\n\n      clone[key] = jsoncDeepAssign(clone[key], source[key as keyof unknown]);\n    } else if (isArray(source[key as keyof unknown])) {\n      if (!clone[key]) {\n        clone = jsonc.assign(clone, _take(source, key));\n      } else {\n        clone[key] = _arrayAssign(clone[key], source[key as keyof unknown]);\n      }\n    } else {\n      clone = jsonc.assign(clone, _take(source, key));\n    }\n  });\n\n  return clone;\n};\n\n/**\n * Log the peppy banner with some fixes depending on the package manager used\n * @returns {void}\n */\nexport const logBanner = () => {\n  // https://www.coolgenerator.com/ascii-text-generator - Roman\n  const banner = `\noo.ooooo.   .ooooo.  oo.ooooo.  oo.ooooo.  oooo    ooo \n 888' \\`88b d88' \\`88b  888' \\`88b  888' \\`88b  \\`88.  .8'  \n 888   888 888ooo888  888   888  888   888   \\`88..8'   \n 888   888 888    .o  888   888  888   888    \\`888'    \n 888bod8P' \\`Y8bod8P'  888bod8P'  888bod8P'     .8'     \n 888                  888        888       .o..P'      \no888o                o888o      o888o      \\`Y8P'\n\nBrilliant ESLint configurations for happier developers\n`;\n\n  const peppyGradient = gradient(\n    { color: \"#FF00CC\", pos: 0 },\n    { color: \"#FFFF00\", pos: 0.7 },\n    { color: \"#B0FF31\", pos: 1 },\n  );\n\n  // resolves weird behavior where the ascii is offset\n  const pkgManager = getUserPkgManager();\n  if (pkgManager === \"yarn\" || pkgManager === \"pnpm\") {\n    // eslint-disable-next-line no-console\n    console.log(\"\");\n  }\n  // eslint-disable-next-line no-console\n  console.log(peppyGradient.multiline(banner));\n};\n","import { type Color, cyan, red, yellow } from \"kleur\";\n\ntype CreateLogFuncOptions = { level: string; color?: Color };\n\n/**\n * Create a logger function\n */\nconst createLogFunc = ({ level, color }: CreateLogFuncOptions) => {\n  const prefix = color ? `[${color(level)}] ` : \"\";\n  // Add spaces calculated on the label char length on the second lines so the text have the same indentation\n  const spaces = color\n    ? level\n        .split(\"\")\n        .map(() => \" \")\n        .join(\"\")\n        .concat(\"   \")\n    : \"\";\n\n  return (...logs: any[]) => {\n    const stream = process[level === \"log\" ? \"stdout\" : \"stderr\"];\n    const message = logs\n      .map((log) => (typeof log === \"string\" ? log : JSON.stringify(log)))\n      .join(`\\n${spaces}`);\n\n    stream.write(`${prefix}${message}\\n`);\n  };\n};\n\nexport const logger = {\n  warn: createLogFunc({ level: \"warn\", color: yellow }),\n  error: createLogFunc({ level: \"error\", color: red }),\n  debug: createLogFunc({ level: \"debug\", color: cyan }),\n  log: createLogFunc({ level: \"log\" }),\n};\n","import { bold, cyan, green, red } from \"kleur\";\nimport prompts from \"prompts\";\nimport { satisfies } from \"semver\";\nimport packageInfo from \"../../package.json\";\nimport {\n  createPkg,\n  getNodeVersionInstalled,\n  getNpmVersionInstalled,\n  getPackageManagersChoices,\n  hasGitChanges,\n  hasMercurialChanges,\n  isPathExists,\n  isPathWriteable,\n} from \"./helpers\";\nimport { logger } from \"./logger\";\n\n/**\n * Check if the user have exited/aborted a prompt and exit the process if it's the case\n * @param {any} promptsValue - the value of the prompts\n * @returns {Void} - nothing\n */\nexport const handlePromptCancel = () => {\n  logger.log(\"Peppy CLI aborted by the user. üò∞\");\n  process.exit(0);\n};\n\n/**\n * Check if the current working directory is writable, if not, it exits the process.\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const promptCheckCWDPermission = async ({\n  cwd = process.cwd(),\n} = {}) => {\n  if (!(await isPathWriteable({ path: cwd }))) {\n    logger.error(\n      `The folder \"${cwd}\" is not writable, please check folder permissions and try again.`,\n      \"It is likely you do not have write permissions for this folder.\",\n    );\n    process.exit(0);\n  }\n};\n\n/**\n * Checks if the project folder has uncommitted changes on Git or Mercurial,\n * and if it does, it asks the user if they want to continue\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const promptCheckGitStatus = async ({ cwd = process.cwd() } = {}) => {\n  const gitChanges = await hasGitChanges({ cwd });\n  const mercurialChanges = await hasMercurialChanges({ cwd });\n\n  if (gitChanges || mercurialChanges) {\n    const where =\n      gitChanges && mercurialChanges\n        ? \"on Git and Mercurial\"\n        : gitChanges\n        ? \"on Git\"\n        : \"on Mercurial\";\n\n    const { goFoward } = await prompts(\n      {\n        type: \"confirm\",\n        name: \"goFoward\",\n        message: `The project folder have uncommitted changes ${where}. Are you sure you want to continue?`,\n        initial: false,\n      },\n      { onCancel: handlePromptCancel },\n    );\n\n    if (goFoward) {\n      logger.log(\n        cyan(\n          \"Proceeding with this installation may lead to some lost uncommitted changes.\",\n        ),\n        cyan(`But hey, you only live once, right? Let's do this! üí£`),\n      );\n    } else {\n      logger.log(\n        cyan(\n          `Good idea! üòå Just commit the uncommitted changes ${where} then retry later.`,\n        ),\n      );\n      process.exit(0);\n    }\n  }\n};\n\n/**\n * Check if the version of Node.js installed on the user system does satisfy\n * the minimal Node.js version, if not, it exits the process.\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const promptCheckNodeVersion = async ({ cwd = process.cwd() } = {}) => {\n  const installedVersion = (await getNodeVersionInstalled({ cwd })) || \"\";\n  const minimalVersion =\n    (packageInfo.engines && packageInfo.engines.node) || \"\";\n\n  if (!satisfies(installedVersion, minimalVersion)) {\n    logger.error(\n      `The version of Node.js installed on your system (${red(\n        installedVersion,\n      )}) does not satisfy the minimal Node.js version (${green(\n        minimalVersion,\n      )}) required by ${packageInfo.name}.`,\n      `You must update Node.js on your system in order to use this package.`,\n    );\n    process.exit(0);\n  }\n};\n\n/**\n * Check if the version of npm installed on the user system does satisfy\n * the minimal NPM version, if not, it exits the process.\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const promptCheckNPMVersion = async ({ cwd = process.cwd() } = {}) => {\n  const installedVersion = (await getNpmVersionInstalled({ cwd })) || \"\";\n  const minimalVersion = (packageInfo.engines && packageInfo.engines.npm) || \"\";\n\n  if (!satisfies(installedVersion, minimalVersion)) {\n    logger.error(\n      `The version of npm installed on your system (${red(\n        installedVersion,\n      )}) does not satisfy the minimal npm version (${green(\n        minimalVersion,\n      )}) required by ${packageInfo.name}.`,\n      `You must update npm on your system in order to use this package.`,\n    );\n    process.exit(0);\n  }\n};\n\n/**\n * Checks if the current working directory has a package.json file.\n * If it doesn't, it asks the user if they want to create one.\n * If they do, it creates one. If they don't, it exits the process\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @param {string} options.packageManager - the package manager to use\n * @returns {Promise<Void>} - a Promise which resolves to nothing\n */\nexport const promptCheckPackageJSON = async ({\n  cwd = process.cwd(),\n  packageManager = \"npm\",\n} = {}) => {\n  if (!(await isPathExists({ path: \"package.json\", cwd }))) {\n    const { initPackageJSON } = await prompts(\n      {\n        type: \"confirm\",\n        name: \"initPackageJSON\",\n        message:\n          \"Your project don't have a package.json. Do you want to create one?\",\n        initial: true,\n      },\n      { onCancel: handlePromptCancel },\n    );\n\n    if (initPackageJSON) {\n      logger.log(cyan(\"Great! Let's do this! ‚ú®\"), \"\");\n      await createPkg({ packageManager, cwd });\n      logger.log(\"\");\n    } else {\n      logger.error(\n        \"The installation cannot continue. The installation must be inside a Node.js project with a package.json.\",\n      );\n      process.exit(0);\n    }\n  }\n};\n\n/**\n * Prompts the user to select a package manager if there are multiple installed on the system\n * @param {Object} options - options\n * @param {string} options.cwd - the current working directory\n * @param {string} options.packageManager - the package manager to use\n * @returns {Promise<string>} - a Promise which resolves to the package manager that the user has selected\n */\nexport const promptCheckPackageManager = async ({\n  cwd = process.cwd(),\n  packageManager,\n}: { cwd?: string; packageManager?: string } = {}) => {\n  if (packageManager) {\n    return packageManager;\n  }\n\n  const packageManagersChoices = await getPackageManagersChoices({ cwd });\n\n  if (packageManagersChoices.length < 2) {\n    return packageManagersChoices?.[0]?.value;\n  }\n\n  const { selectedPackageManager } = await prompts(\n    {\n      type: \"select\",\n      name: \"selectedPackageManager\",\n      message:\n        \"You have multiple package managers installed on your system. Wich one do you want to use?\",\n      instructions: false,\n      choices: packageManagersChoices,\n    },\n    { onCancel: handlePromptCancel },\n  );\n\n  logger.log(\n    cyan(\n      `Okay! I'll use ${bold(selectedPackageManager)} as the package manager.`,\n    ),\n  );\n\n  return selectedPackageManager;\n};\n"],"mappings":"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","names":["import_commander","import_kleur","import_kleur","import_prompts","import_kleur","fs","nodePath","execa","ora","rimrafSync","jsonc","keys","clone","gradient","import_kleur","import_semver","prompts","prompts","checkForUpdate"]}