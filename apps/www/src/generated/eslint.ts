import { type Rules } from "@/types/eslint";

// This file is generated by `apps/www/scripts/docgen.ts`
// DO NOT EDIT IT MANUALLY
export const rules: Rules = {
  "@babel/object-curly-spacing": {
    description: "Enforce consistent spacing inside braces",
    docsUrl:
      "https://github.com/babel/babel/tree/main/eslint/babel-eslint-plugin",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@babel/semi": {
    description: "Require or disallow semicolons instead of ASI",
    docsUrl:
      "https://github.com/babel/babel/tree/main/eslint/babel-eslint-plugin",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/google-font-display": {
    description: "Enforce font-display behavior with Google Fonts",
    docsUrl: "https://nextjs.org/docs/messages/google-font-display",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/google-font-preconnect": {
    description: "Ensure `preconnect` is used with Google Fonts",
    docsUrl: "https://nextjs.org/docs/messages/google-font-preconnect",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/inline-script-id": {
    description:
      "Enforce `id` attribute on `next/script` components with inline content",
    docsUrl: "https://nextjs.org/docs/messages/inline-script-id",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/next-script-for-ga": {
    description:
      "Prefer `next/script` component when using the inline script for Google Analytics",
    docsUrl: "https://nextjs.org/docs/messages/next-script-for-ga",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-assign-module-variable": {
    description: "Prevent assignment to the `module` variable",
    docsUrl: "https://nextjs.org/docs/messages/no-assign-module-variable",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-async-client-component": {
    description: "Client components cannot be async functions",
    docsUrl: "https://nextjs.org/docs/messages/no-async-client-component",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-before-interactive-script-outside-document": {
    description:
      "Prevent usage of `next/script`'s `beforeInteractive` strategy outside of `pages/_document.js`",
    docsUrl:
      "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-css-tags": {
    description: "Prevent manual stylesheet tags",
    docsUrl: "https://nextjs.org/docs/messages/no-css-tags",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-document-import-in-page": {
    description:
      "Prevent importing `next/document` outside of `pages/_document.js`",
    docsUrl: "https://nextjs.org/docs/messages/no-document-import-in-page",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-duplicate-head": {
    description: "Prevent duplicate usage of `<Head>` in `pages/_document.js`",
    docsUrl: "https://nextjs.org/docs/messages/no-duplicate-head",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-head-element": {
    description: "Prevent usage of `<head>` element",
    docsUrl: "https://nextjs.org/docs/messages/no-head-element",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-head-import-in-document": {
    description: "Prevent usage of `next/head` in `pages/_document.js`",
    docsUrl: "https://nextjs.org/docs/messages/no-head-import-in-document",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-html-link-for-pages": {
    description:
      "Prevent usage of `<a>` elements to navigate to internal Next.js pages",
    docsUrl: "https://nextjs.org/docs/messages/no-html-link-for-pages",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-img-element": {
    description:
      "Prevent usage of `<img>` element due to slower LCP and higher bandwidth",
    docsUrl: "https://nextjs.org/docs/messages/no-img-element",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-page-custom-font": {
    description: "Prevent page-only custom fonts",
    docsUrl: "https://nextjs.org/docs/messages/no-page-custom-font",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-script-component-in-head": {
    description: "Prevent usage of `next/script` in `next/head` component",
    docsUrl: "https://nextjs.org/docs/messages/no-script-component-in-head",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-styled-jsx-in-document": {
    description: "Prevent usage of `styled-jsx` in `pages/_document.js`",
    docsUrl: "https://nextjs.org/docs/messages/no-styled-jsx-in-document",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-sync-scripts": {
    description: "Prevent synchronous scripts",
    docsUrl: "https://nextjs.org/docs/messages/no-sync-scripts",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-title-in-document-head": {
    description:
      "Prevent usage of `<title>` with `Head` component from `next/document`",
    docsUrl: "https://nextjs.org/docs/messages/no-title-in-document-head",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-typos": {
    description: "Prevent common typos in Next.js's data fetching functions",
    docsUrl: "https://nextjs.org/docs/messages/no-typos",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@next/next/no-unwanted-polyfillio": {
    description: "Prevent duplicate polyfills from Polyfill.io",
    docsUrl: "https://nextjs.org/docs/messages/no-unwanted-polyfillio",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/block-spacing": {
    description:
      "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/block-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/brace-style": {
    description: "Enforce consistent brace style for blocks",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/brace-style.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/comma-dangle": {
    description: "Require or disallow trailing commas",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/comma-dangle.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/comma-spacing": {
    description: "Enforce consistent spacing before and after commas",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/comma-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/consistent-type-exports": {
    description: "Enforces consistent usage of type exports",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/consistent-type-exports.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/consistent-type-imports": {
    description: "Enforces consistent usage of type imports",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/consistent-type-imports.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry: '["error", { "prefer": "type-imports" }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/default-param-last": {
    description: "Enforce default parameters to be last",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/default-param-last.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/dot-notation": {
    description: "Enforce dot notation whenever possible",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/dot-notation.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "allowKeywords": true,\n    "allowPattern": "",\n    "allowPrivateClassPropertyAccess": false,\n    "allowProtectedClassPropertyAccess": false,\n    "allowIndexSignaturePropertyAccess": false\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/func-call-spacing": {
    description:
      "Require or disallow spacing between function identifiers and their invocations",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/func-call-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/indent": {
    description: "Enforce consistent indentation",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/indent.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/key-spacing": {
    description:
      "Enforce consistent spacing between property names and type annotations in types and interfaces",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/key-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/keyword-spacing": {
    description: "Enforce consistent spacing before and after keywords",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/keyword-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/lines-around-comment": {
    description: "Require empty lines around comments",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/lines-around-comment.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/lines-between-class-members": {
    description: "Require or disallow an empty line between class members",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/lines-between-class-members.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '[\n  "error",\n  "always",\n  { "exceptAfterSingleLine": false, "exceptAfterOverload": true }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/member-delimiter-style": {
    description:
      "Require a specific member delimiter style for interfaces and type literals",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/member-delimiter-style.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/naming-convention": {
    description: "Enforces naming conventions for everything across a codebase",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/naming-convention.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "selector": "variable",\n    "format": ["camelCase", "PascalCase", "UPPER_CASE"],\n    "leadingUnderscore": "allow",\n    "trailingUnderscore": "allow"\n  },\n  {\n    "selector": "function",\n    "format": ["camelCase", "PascalCase"],\n    "leadingUnderscore": "allow",\n    "trailingUnderscore": "allow"\n  },\n  {\n    "selector": "typeLike",\n    "format": ["PascalCase", "UPPER_CASE"],\n    "leadingUnderscore": "allow",\n    "trailingUnderscore": "allow"\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-array-constructor": {
    description: "Disallow `Array` constructors",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-array-constructor.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-dupe-class-members": {
    description: "Disallow duplicate class members",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-dupe-class-members.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-empty-function": {
    description: "Disallow empty functions",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-empty-function.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '["error", { "allow": ["arrowFunctions", "functions", "methods"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-extra-parens": {
    description: "Disallow unnecessary parentheses",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-extra-parens.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-extra-semi": {
    description: "Disallow unnecessary semicolons",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-extra-semi.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-implied-eval": {
    description: "Disallow the use of `eval()`",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-implied-eval.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-loop-func": {
    description:
      "Disallow function declarations that contain unsafe references inside loop statements",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-loop-func.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-loss-of-precision": {
    description: "Disallow Number Literals That Lose Precision",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-loss-of-precision.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-redeclare": {
    description: "Disallow variable redeclaration",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-redeclare.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry: '["error", { "ignoreDeclarationMerge": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-shadow": {
    description:
      "Disallow variable declarations from shadowing variables declared in the outer scope",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-shadow.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-throw-literal": {
    description: "Disallow throwing literals as exceptions",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-throw-literal.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-unused-expressions": {
    description: "Disallow unused expressions",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-unused-expressions.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "allowShortCircuit": true,\n    "allowTaggedTemplates": true,\n    "allowTernary": true,\n    "enforceForJSX": false\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-unused-vars": {
    description: "Disallow unused variables",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-unused-vars.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: {
                entry:
                  '[\n  "warn",\n  {\n    "args": "after-used",\n    "argsIgnorePattern": "^_",\n    "ignoreRestSiblings": true,\n    "vars": "all"\n  }\n]\n',
                level: "warn",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/no-useless-constructor": {
    description: "Disallow unnecessary constructors",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/no-useless-constructor.md",
    usedBy: {
      base: {
        versions: [
          {
            values: { ts: { entry: '["error"]\n', level: "error" } },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/object-curly-spacing": {
    description: "Enforce consistent spacing inside braces",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/object-curly-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/quotes": {
    description:
      "Enforce the consistent use of either backticks, double, or single quotes",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/quotes.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/return-await": {
    description: "Disallow unnecessary `return await`",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/return-await.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              ts: { entry: '["error", "in-try-catch"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/semi": {
    description: "Require or disallow semicolons instead of ASI",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/semi.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/space-before-blocks": {
    description: "Enforce consistent spacing before blocks",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/space-before-blocks.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/space-before-function-paren": {
    description: "Enforce consistent spacing before function parenthesis",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/space-before-function-paren.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/space-infix-ops": {
    description: "Require spacing around infix operators",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/space-infix-ops.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "@typescript-eslint/type-annotation-spacing": {
    description: "Require consistent spacing around type annotations",
    docsUrl:
      "https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin/docs/rules/type-annotation-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "array-bracket-newline": {
    description:
      "Enforce linebreaks after opening and before closing array brackets",
    docsUrl: "https://eslint.org/docs/rules/array-bracket-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "array-bracket-spacing": {
    description: "Enforce consistent spacing inside array brackets",
    docsUrl: "https://eslint.org/docs/rules/array-bracket-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "array-callback-return": {
    description: "Enforce `return` statements in callbacks of array methods",
    docsUrl: "https://eslint.org/docs/rules/array-callback-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "allowImplicit": true, "checkForEach": false }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "allowImplicit": true, "checkForEach": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "array-element-newline": {
    description: "Enforce line breaks after each array element",
    docsUrl: "https://eslint.org/docs/rules/array-element-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "arrow-body-style": {
    description: "Require braces in arrow function body",
    docsUrl: "https://eslint.org/docs/rules/arrow-body-style",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", "as-needed", { "requireReturnForObjectLiteral": false }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", "as-needed", { "requireReturnForObjectLiteral": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "arrow-parens": {
    description: "Require parentheses around arrow function arguments",
    docsUrl: "https://eslint.org/docs/rules/arrow-parens",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "arrow-spacing": {
    description:
      "Enforce consistent spacing before and after the arrow in arrow functions",
    docsUrl: "https://eslint.org/docs/rules/arrow-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "babel/object-curly-spacing": {
    description: "Enforce consistent spacing inside braces",
    docsUrl: "https://github.com/babel/eslint-plugin-babel",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "babel/quotes": {
    description:
      "Enforce the consistent use of either backticks, double, or single quotes",
    docsUrl: "https://github.com/babel/eslint-plugin-babel",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "babel/semi": {
    description: "Require or disallow semicolons instead of ASI",
    docsUrl: "https://github.com/babel/eslint-plugin-babel",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "block-scoped-var": {
    description:
      "Enforce the use of variables within the scope they are defined",
    docsUrl: "https://eslint.org/docs/rules/block-scoped-var",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "block-spacing": {
    description:
      "Disallow or enforce spaces inside of blocks after opening block and before closing block",
    docsUrl: "https://eslint.org/docs/rules/block-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "brace-style": {
    description: "Enforce consistent brace style for blocks",
    docsUrl: "https://eslint.org/docs/rules/brace-style",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  camelcase: {
    description: "Enforce camelCase naming convention",
    docsUrl: "https://eslint.org/docs/rules/camelcase",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "ignoreDestructuring": false,\n    "ignoreGlobals": false,\n    "ignoreImports": false,\n    "properties": "never"\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "ignoreDestructuring": false,\n    "ignoreGlobals": false,\n    "ignoreImports": false,\n    "properties": "never"\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "class-methods-use-this": {
    description: "Enforce that class methods utilize `this`",
    docsUrl: "https://eslint.org/docs/rules/class-methods-use-this",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "enforceForClassFields": true, "exceptMethods": [] }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "enforceForClassFields": true, "exceptMethods": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "enforceForClassFields": true,\n    "exceptMethods": [\n      "render",\n      "getInitialState",\n      "getDefaultProps",\n      "getChildContext",\n      "componentWillMount",\n      "UNSAFE_componentWillMount",\n      "componentDidMount",\n      "componentWillReceiveProps",\n      "UNSAFE_componentWillReceiveProps",\n      "shouldComponentUpdate",\n      "componentWillUpdate",\n      "UNSAFE_componentWillUpdate",\n      "componentDidUpdate",\n      "componentWillUnmount",\n      "componentDidCatch",\n      "getSnapshotBeforeUpdate"\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "enforceForClassFields": true,\n    "exceptMethods": [\n      "render",\n      "getInitialState",\n      "getDefaultProps",\n      "getChildContext",\n      "componentWillMount",\n      "UNSAFE_componentWillMount",\n      "componentDidMount",\n      "componentWillReceiveProps",\n      "UNSAFE_componentWillReceiveProps",\n      "shouldComponentUpdate",\n      "componentWillUpdate",\n      "UNSAFE_componentWillUpdate",\n      "componentDidUpdate",\n      "componentWillUnmount",\n      "componentDidCatch",\n      "getSnapshotBeforeUpdate"\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "comma-dangle": {
    description: "Require or disallow trailing commas",
    docsUrl: "https://eslint.org/docs/rules/comma-dangle",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "comma-spacing": {
    description: "Enforce consistent spacing before and after commas",
    docsUrl: "https://eslint.org/docs/rules/comma-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "comma-style": {
    description: "Enforce consistent comma style",
    docsUrl: "https://eslint.org/docs/rules/comma-style",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "computed-property-spacing": {
    description: "Enforce consistent spacing inside computed property brackets",
    docsUrl: "https://eslint.org/docs/rules/computed-property-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "consistent-return": {
    description:
      "Require `return` statements to either always or never specify values",
    docsUrl: "https://eslint.org/docs/rules/consistent-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "constructor-super": {
    description: "Require `super()` calls in constructors",
    docsUrl: "https://eslint.org/docs/rules/constructor-super",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  curly: {
    description: "Enforce consistent brace style for all control statements",
    docsUrl: "https://eslint.org/docs/rules/curly",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "all"]\n', level: "error" },
              ts: { entry: '["error", "all"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "default-case": {
    description: "Require `default` cases in `switch` statements",
    docsUrl: "https://eslint.org/docs/rules/default-case",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "commentPattern": "^no default$" }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "commentPattern": "^no default$" }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "default-case-last": {
    description: "Enforce default parameters to be last",
    docsUrl: "https://eslint.org/docs/rules/default-case-last",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "default-param-last": {
    description: "Enforce default parameters to be last",
    docsUrl: "https://eslint.org/docs/rules/default-param-last",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "dot-location": {
    description: "Enforce consistent newlines before and after dots",
    docsUrl: "https://eslint.org/docs/rules/dot-location",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "dot-notation": {
    description: "Enforce dot notation whenever possible",
    docsUrl: "https://eslint.org/docs/rules/dot-notation",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "allowKeywords": true,\n    "allowPattern": "",\n    "allowPrivateClassPropertyAccess": false,\n    "allowProtectedClassPropertyAccess": false,\n    "allowIndexSignaturePropertyAccess": false\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "allowKeywords": true,\n    "allowPattern": "",\n    "allowPrivateClassPropertyAccess": false,\n    "allowProtectedClassPropertyAccess": false,\n    "allowIndexSignaturePropertyAccess": false\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "eol-last": {
    description: "Require or disallow newline at the end of files",
    docsUrl: "https://eslint.org/docs/rules/eol-last",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  eqeqeq: {
    description: "Require the use of `===` and `!==`",
    docsUrl: "https://eslint.org/docs/rules/eqeqeq",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/boolean-style": {
    description: "Enforces a particular style for boolean type annotations",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-boolean-style",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/delimiter-dangle": {
    description:
      "Enforces consistent use of trailing commas in Object and Tuple annotations",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-delimiter-dangle",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/generic-spacing": {
    description:
      "Enforces consistent spacing within generic type annotation parameters",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-generic-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/object-type-curly-spacing": {
    description: "Enforces consistent spacing inside braces of object types",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-object-type-curly-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/object-type-delimiter": {
    description:
      "Enforces consistent separators between properties in Flow object types",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-object-type-delimiter",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/quotes": {
    description:
      "Enforces single quotes or double quotes around string literals",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-quotes",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/semi": {
    description: "Enforces consistent use of semicolons after type aliases",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-semi",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/space-after-type-colon": {
    description: "Enforces consistent spacing after the type annotation colon",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-space-after-type-colon",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/space-before-generic-bracket": {
    description:
      "Enforces consistent spacing before the opening `<` of generic type annotation parameters",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-space-before-generic-bracket",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/space-before-type-colon": {
    description: "Enforces consistent spacing before the type annotation colon",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-space-before-type-colon",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "flowtype/union-intersection-spacing": {
    description:
      "Enforces consistent spacing around union and intersection type separators (`|` and `&`)",
    docsUrl:
      "https://github.com/gajus/eslint-plugin-flowtype/#eslint-plugin-flowtype-rules-union-intersection-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "for-direction": {
    description:
      'Enforce "for" loop update clause moving the counter in the right direction',
    docsUrl: "https://eslint.org/docs/rules/for-direction",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "func-call-spacing": {
    description:
      "Require or disallow spacing between function identifiers and their invocations",
    docsUrl: "https://eslint.org/docs/rules/func-call-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "func-names": {
    description: "Require or disallow named `function` expressions",
    docsUrl: "https://eslint.org/docs/rules/func-names",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "function-call-argument-newline": {
    description: "Enforce line breaks between arguments of a function call",
    docsUrl: "https://eslint.org/docs/rules/function-call-argument-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "function-paren-newline": {
    description: "Enforce consistent line breaks inside function parentheses",
    docsUrl: "https://eslint.org/docs/rules/function-paren-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "generator-star": {
    description:
      "Enforces consistent spacing around the asterisk in generator functions",
    docsUrl: "https://eslint.org/docs/rules/generator-star",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "generator-star-spacing": {
    description:
      "Enforce consistent spacing around `*` operators in generator functions",
    docsUrl: "https://eslint.org/docs/rules/generator-star-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "getter-return": {
    description: "Enforce `return` statements in getters",
    docsUrl: "https://eslint.org/docs/rules/getter-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "allowImplicit": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["off", { "allowImplicit": true }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "global-require": {
    description:
      "Require `require()` calls to be placed at top-level module scope",
    docsUrl: "https://eslint.org/docs/rules/global-require",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "grouped-accessor-pairs": {
    description:
      "Require grouped accessor pairs in object literals and classes",
    docsUrl: "https://eslint.org/docs/rules/grouped-accessor-pairs",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "guard-for-in": {
    description: "Require `for-in` loops to include an `if` statement",
    docsUrl: "https://eslint.org/docs/rules/guard-for-in",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "implicit-arrow-linebreak": {
    description: "Enforce the location of arrow function bodies",
    docsUrl: "https://eslint.org/docs/rules/implicit-arrow-linebreak",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/export": {
    description: "Forbid any invalid exports, i.e. re-export of the same name",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/export.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/extensions": {
    description:
      "Ensure consistent use of file extension within the import path",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/extensions.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  "ignorePackages",\n  { "js": "never", "jsx": "never", "cjs": "never", "mjs": "never" }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  "ignorePackages",\n  {\n    "js": "never",\n    "jsx": "never",\n    "cjs": "never",\n    "mjs": "never",\n    "ts": "never",\n    "tsx": "never"\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/first": {
    description: "Ensure all imports appear before other statements",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/first.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/named": {
    description:
      "\tEnsure named imports correspond to a named export in the remote file",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/named.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/newline-after-import": {
    description: "Enforce a newline after import statements",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/newline-after-import.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-absolute-path": {
    description: "Forbid import of modules using absolute paths",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-absolute-path.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-amd": {
    description: "Forbid AMD `require` and `define` calls",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-amd.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-cycle": {
    description:
      "Forbid a module from importing a module with a dependency path back to itself",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-cycle.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "ignoreExternal": false,\n    "maxDepth": "∞",\n    "allowUnsafeDynamicCyclicDependency": false\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "ignoreExternal": false,\n    "maxDepth": "∞",\n    "allowUnsafeDynamicCyclicDependency": false\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-duplicates": {
    description: "Forbid repeated import of the same module in multiple places",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-duplicates.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-dynamic-require": {
    description: "Forbid `require()` calls with expressions",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-dynamic-require.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-extraneous-dependencies": {
    description: "Forbid the use of extraneous packages",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-extraneous-dependencies.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "devDependencies": [\n      "test/**",\n      "tests/**",\n      "spec/**",\n      "**/__tests__/**",\n      "**/__mocks__/**",\n      "test.{js,jsx,cjs,mjs}",\n      "test-*.{js,jsx,cjs,mjs}",\n      "**/*{.,_}{test,spec}.{js,jsx,cjs,mjs}",\n      "**/.eslintrc.{js,cjs,mjs}",\n      "**/astro.config.{js,cjs,mjs}",\n      "**/babel.config.{js,cjs,mjs}",\n      "**/contentlayer.config.{js,cjs,mjs}",\n      "**/gatsby-config.{js,cjs,mjs}",\n      "**/Gruntfile{,.js,.cjs,.mjs}",\n      "**/gulpfile.{js,cjs,mjs}",\n      "**/gulpfile.*.{js,cjs,mjs}",\n      "**/jest.config.{js,cjs,mjs}",\n      "**/jest.setup.{js,cjs,mjs}",\n      "**/karma.conf.{js,cjs,mjs}",\n      "**/next-sitemap.config.{js,cjs,mjs}",\n      "**/next.config.{js,cjs,mjs}",\n      "**/postcss.config.{js,cjs,mjs}",\n      "**/prettierrc.{js,cjs,mjs}",\n      "**/protractor.conf.{js,cjs,mjs}",\n      "**/protractor.conf.*.{js,cjs,mjs}",\n      "**/remix.config.{js,cjs,mjs}",\n      "**/rollup.config.{js,cjs,mjs}",\n      "**/rollup.config.*.{js,cjs,mjs}",\n      "**/tailwind.config.{js,cjs,mjs}",\n      "**/vue.config.{js,cjs,mjs}",\n      "**/webpack.config.{js,cjs,mjs}",\n      "**/webpack.config.*.{js,cjs,mjs}"\n    ],\n    "optionalDependencies": false\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "devDependencies": [\n      "test/**",\n      "tests/**",\n      "spec/**",\n      "**/__tests__/**",\n      "**/__mocks__/**",\n      "test.{js,jsx,cjs,mjs}",\n      "test.{ts,tsx,cts,mts}",\n      "test-*.{js,jsx,cjs,mjs}",\n      "test-*.{ts,tsx,cts,mts}",\n      "**/*{.,_}{test,spec}.{js,jsx,cjs,mjs}",\n      "**/*{.,_}{test,spec}.{ts,tsx,cts,mts}",\n      "**/.eslintrc.{js,cjs,mjs}",\n      "**/.eslintrc.{ts,cts,mts}",\n      "**/astro.config.{js,cjs,mjs}",\n      "**/astro.config.{ts,cts,mts}",\n      "**/babel.config.{js,cjs,mjs}",\n      "**/babel.config.{ts,cts,mts}",\n      "**/contentlayer.config.{js,cjs,mjs}",\n      "**/contentlayer.config.{ts,cts,mts}",\n      "**/gatsby-config.{js,cjs,mjs}",\n      "**/gatsby-config.{ts,cts,mts}",\n      "**/Gruntfile{,.js,.cjs,.mjs}",\n      "**/Gruntfile{,.ts,.cts,.mts}",\n      "**/gulpfile.{js,cjs,mjs}",\n      "**/gulpfile.{ts,cts,mts}",\n      "**/gulpfile.*.{js,cjs,mjs}",\n      "**/gulpfile.*.{ts,cts,mts}",\n      "**/jest.config.{js,cjs,mjs}",\n      "**/jest.config.{ts,cts,mts}",\n      "**/jest.setup.{js,cjs,mjs}",\n      "**/jest.setup.{ts,cts,mts}",\n      "**/karma.conf.{js,cjs,mjs}",\n      "**/karma.conf.{ts,cts,mts}",\n      "**/next-sitemap.config.{js,cjs,mjs}",\n      "**/next-sitemap.config.{ts,cts,mts}",\n      "**/next.config.{js,cjs,mjs}",\n      "**/next.config.{ts,cts,mts}",\n      "**/postcss.config.{js,cjs,mjs}",\n      "**/postcss.config.{ts,cts,mts}",\n      "**/prettierrc.{js,cjs,mjs}",\n      "**/prettierrc.{ts,cts,mts}",\n      "**/protractor.conf.{js,cjs,mjs}",\n      "**/protractor.conf.{ts,cts,mts}",\n      "**/protractor.conf.*.{js,cjs,mjs}",\n      "**/protractor.conf.*.{ts,cts,mts}",\n      "**/remix.config.{js,cjs,mjs}",\n      "**/remix.config.{ts,cts,mts}",\n      "**/rollup.config.{js,cjs,mjs}",\n      "**/rollup.config.{ts,cts,mts}",\n      "**/rollup.config.*.{js,cjs,mjs}",\n      "**/rollup.config.*.{ts,cts,mts}",\n      "**/tailwind.config.{js,cjs,mjs}",\n      "**/tailwind.config.{ts,cts,mts}",\n      "**/vue.config.{js,cjs,mjs}",\n      "**/vue.config.{ts,cts,mts}",\n      "**/webpack.config.{js,cjs,mjs}",\n      "**/webpack.config.{ts,cts,mts}",\n      "**/webpack.config.*.{js,cjs,mjs}",\n      "**/webpack.config.*.{ts,cts,mts}"\n    ],\n    "optionalDependencies": false\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-import-module-exports": {
    description: "Forbid import statements with CommonJS module.exports",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-import-module-exports.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "exceptions": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "exceptions": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-mutable-exports": {
    description: "Forbid the use of mutable exports with `var` or `let`",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-mutable-exports.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-named-as-default": {
    description: "Forbid use of exported name as identifier of default export",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-named-as-default.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-named-as-default-member": {
    description: "Forbid use of exported name as property of default export",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-named-as-default-member.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-named-default": {
    description: "Forbid named default exports",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-named-default.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-relative-packages": {
    description: "Forbid importing packages through relative paths",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-relative-packages.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-self-import": {
    description: "Forbid a module from importing itself",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-self-import.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-unresolved": {
    description: "Ensure imports point to a file/module that can be resolved",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-unresolved.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  { "caseSensitive": true, "caseSensitiveStrict": false, "commonjs": true }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "off",\n  { "caseSensitive": true, "caseSensitiveStrict": false, "commonjs": true }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-useless-path-segments": {
    description:
      "Forbid unnecessary path segments in import and require statements",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-useless-path-segments.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "commonjs": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "commonjs": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "import/no-webpack-loader-syntax": {
    description: "Forbid webpack loader syntax in imports",
    docsUrl:
      "https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules/no-webpack-loader-syntax.md",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  indent: {
    description: "Enforce consistent indentation",
    docsUrl: "https://eslint.org/docs/rules/indent",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "indent-legacy": {
    description: "Enforce consistent indentation",
    docsUrl: "https://eslint.org/docs/rules/indent-legacy",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/expect-expect": {
    description: "Enforce assertion to be made in a test body",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/expect-expect.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-alias-methods": {
    description: "Disallow alias methods",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-alias-methods.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-commented-out-tests": {
    description: "Disallow commented out tests",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-commented-out-tests.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-conditional-expect": {
    description: "Disallow calling `expect` conditionally",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-conditional-expect.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-deprecated-functions": {
    description: "Disallow use of deprecated functions",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-deprecated-functions.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-disabled-tests": {
    description: "Disallow disabled tests",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-disabled-tests.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-done-callback": {
    description: "Disallow using a callback in asynchronous tests and hooks",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-done-callback.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-export": {
    description: "Disallow using `exports` in files containing tests",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-export.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-focused-tests": {
    description: "Disallow focused tests",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-focused-tests.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-identical-title": {
    description: "Disallow identical titles",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-identical-title.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-interpolation-in-snapshots": {
    description: "Disallow string interpolation inside snapshots",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-interpolation-in-snapshots.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-jasmine-globals": {
    description: "Disallow Jasmine globals",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-jasmine-globals.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-mocks-import": {
    description: "Disallow manually importing from `__mocks__`",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-mocks-import.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-standalone-expect": {
    description: "Disallow using `expect` outside of `it` or `test` blocks",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-standalone-expect.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/no-test-prefixes": {
    description: "Require using `.only` and `.skip` over `f` and `x`",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/no-test-prefixes.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/valid-describe-callback": {
    description: "Enforce valid `describe()` callback",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/valid-describe-callback.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/valid-expect": {
    description: "Enforce valid `expect()` usage",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/valid-expect.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/valid-expect-in-promise": {
    description:
      "Require promises that have expectations in their chain to be valid",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/valid-expect-in-promise.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jest/valid-title": {
    description: "Enforce valid titles",
    docsUrl:
      "https://github.com/jest-community/eslint-plugin-jest/tree/main/docs/rules/valid-title.md",
    usedBy: {
      jest: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/accessible-emoji": {
    description:
      "Enforce emojis are wrapped in `<span>` and provide screenreader access",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/accessible-emoji.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/alt-text": {
    description:
      "Enforce all elements that require alternative text have meaningful information to relay back to end user",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/alt-text.md",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "area": [],\n    "elements": ["img", "object", "area", "input[type=\\"image\\"]"],\n    "img": ["Image"],\n    "input[type=\\"image\\"]": [],\n    "object": []\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "area": [],\n    "elements": ["img", "object", "area", "input[type=\\"image\\"]"],\n    "img": ["Image"],\n    "input[type=\\"image\\"]": [],\n    "object": []\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "area": [],\n    "elements": ["img", "object", "area", "input[type=\\"image\\"]"],\n    "img": [],\n    "input[type=\\"image\\"]": [],\n    "object": []\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "area": [],\n    "elements": ["img", "object", "area", "input[type=\\"image\\"]"],\n    "img": [],\n    "input[type=\\"image\\"]": [],\n    "object": []\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/anchor-has-content": {
    description: "Enforce all anchors to contain accessible content",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/anchor-has-content.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "components": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "components": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/anchor-is-valid": {
    description: "Enforce all anchors are valid, navigable elements",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/anchor-is-valid.md",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "components": ["Link"],\n    "specialLink": ["hrefLeft", "hrefRight"],\n    "aspects": ["invalidHref", "preferButton"]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "components": ["Link"],\n    "specialLink": ["hrefLeft", "hrefRight"],\n    "aspects": ["invalidHref", "preferButton"]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "aspects": ["noHref", "invalidHref", "preferButton"],\n    "components": ["Link"],\n    "specialLink": ["to"]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "aspects": ["noHref", "invalidHref", "preferButton"],\n    "components": ["Link"],\n    "specialLink": ["to"]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/aria-activedescendant-has-tabindex": {
    description: "Enforce elements with aria-activedescendant are tabbable",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-activedescendant-has-tabindex.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/aria-props": {
    description: "Enforce all `aria-*` props are valid",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/aria-proptypes": {
    description: "Enforce ARIA state and property values are valid",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-proptypes.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/aria-role": {
    description:
      "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-role.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignoreNonDOM": false }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignoreNonDOM": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/aria-unsupported-elements": {
    description:
      "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/aria-unsupported-elements.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/autocomplete-valid": {
    description: "Enforce that autocomplete attributes are used correctly",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/autocomplete-valid.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["off", { "inputComponents": [] }]\n',
                level: "off",
              },
              ts: {
                entry: '["off", { "inputComponents": [] }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/click-events-have-key-events": {
    description:
      "Enforce a clickable non-interactive element has at least one keyboard event listener",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/click-events-have-key-events.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/control-has-associated-label": {
    description:
      "Enforce that a control (an interactive element) has a text label",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/control-has-associated-label.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "controlComponents": [],\n    "depth": 5,\n    "ignoreElements": [\n      "audio",\n      "canvas",\n      "embed",\n      "input",\n      "textarea",\n      "tr",\n      "video"\n    ],\n    "ignoreRoles": [\n      "grid",\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "row",\n      "tablist",\n      "toolbar",\n      "tree",\n      "treegrid"\n    ],\n    "labelAttributes": ["label"]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "controlComponents": [],\n    "depth": 5,\n    "ignoreElements": [\n      "audio",\n      "canvas",\n      "embed",\n      "input",\n      "textarea",\n      "tr",\n      "video"\n    ],\n    "ignoreRoles": [\n      "grid",\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "row",\n      "tablist",\n      "toolbar",\n      "tree",\n      "treegrid"\n    ],\n    "labelAttributes": ["label"]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/heading-has-content": {
    description:
      "Enforce heading (`h1`, `h2`, etc) elements contain accessible content",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/heading-has-content.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "components": [""] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "components": [""] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/html-has-lang": {
    description: "Enforce `<html>` element has `lang` prop",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/html-has-lang.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/iframe-has-title": {
    description: "Enforce iframe elements have a title attribute",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/iframe-has-title.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/img-redundant-alt": {
    description:
      'Enforce `<img>` alt prop does not contain the word "image", "picture", or "photo"',
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/img-redundant-alt.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/interactive-supports-focus": {
    description:
      "Enforce that elements with interactive handlers like `onClick` must be focusable",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/interactive-supports-focus.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/label-has-associated-control": {
    description:
      "Enforce that a `label` tag has a text label and an associated control",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/label-has-associated-control.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "assert": "both",\n    "controlComponents": [],\n    "depth": 25,\n    "labelAttributes": [],\n    "labelComponents": []\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "assert": "both",\n    "controlComponents": [],\n    "depth": 25,\n    "labelAttributes": [],\n    "labelComponents": []\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/label-has-for": {
    description: "Enforce that `<label>` elements have the `htmlFor` prop",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/label-has-for.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "off",\n  {\n    "allowChildren": false,\n    "components": [],\n    "required": { "every": ["nesting", "id"] }\n  }\n]\n',
                level: "off",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "allowChildren": false,\n    "components": [],\n    "required": { "every": ["nesting", "id"] }\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/lang": {
    description: "Enforce lang attribute has a valid value",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/lang.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/media-has-caption": {
    description:
      "Enforces that `<audio>` and `<video>` elements must have a `<track>` for captions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/media-has-caption.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "audio": [], "track": [], "video": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "audio": [], "track": [], "video": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/mouse-events-have-key-events": {
    description:
      "Enforce that `onMouseOver`/`onMouseOut` are accompanied by `onFocus`/`onBlur` for keyboard-only users",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/mouse-events-have-key-events.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-access-key": {
    description:
      "Enforce that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screenreader",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-access-key.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-autofocus": {
    description: "Enforce autoFocus prop is not used",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-autofocus.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignoreNonDOM": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignoreNonDOM": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-distracting-elements": {
    description: "Enforce distracting elements are not used",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-distracting-elements.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "elements": ["marquee", "blink"] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "elements": ["marquee", "blink"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-interactive-element-to-noninteractive-role": {
    description:
      "Enforce that interactive elements should not be assigned non-interactive roles",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-interactive-element-to-noninteractive-role.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "tr": ["none", "presentation"] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "tr": ["none", "presentation"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-noninteractive-element-interactions": {
    description:
      "Enforce that non-interactive elements should not be assigned mouse or keyboard event listeners",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-element-interactions.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "handlers": [\n      "onClick",\n      "onMouseDown",\n      "onMouseUp",\n      "onKeyPress",\n      "onKeyDown",\n      "onKeyUp"\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "handlers": [\n      "onClick",\n      "onMouseDown",\n      "onMouseUp",\n      "onKeyPress",\n      "onKeyDown",\n      "onKeyUp"\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-noninteractive-element-to-interactive-role": {
    description:
      "Enforce that non-interactive elements should not be assigned interactive roles",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-element-to-interactive-role.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "li": ["menuitem", "option", "row", "tab", "treeitem"],\n    "ol": [\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "tablist",\n      "tree",\n      "treegrid"\n    ],\n    "table": ["grid"],\n    "td": ["gridcell"],\n    "ul": [\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "tablist",\n      "tree",\n      "treegrid"\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "li": ["menuitem", "option", "row", "tab", "treeitem"],\n    "ol": [\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "tablist",\n      "tree",\n      "treegrid"\n    ],\n    "table": ["grid"],\n    "td": ["gridcell"],\n    "ul": [\n      "listbox",\n      "menu",\n      "menubar",\n      "radiogroup",\n      "tablist",\n      "tree",\n      "treegrid"\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-noninteractive-tabindex": {
    description:
      "Enforce that `tabIndex` should only be declared on interactive elements",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-noninteractive-tabindex.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "roles": ["tabpanel"], "tags": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "roles": ["tabpanel"], "tags": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-onchange": {
    description:
      "Enforce usage of `onBlur` over `onChange` on select menus for accessibility",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-onchange.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-redundant-roles": {
    description:
      "Enforce explicit role property is not the same as implicit/default role property on element",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-redundant-roles.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/no-static-element-interactions": {
    description:
      "Enforce that non-interactive, visible elements (such as `<div>`) that have click handlers use the role attribute",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/no-static-element-interactions.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "handlers": [\n      "onClick",\n      "onMouseDown",\n      "onMouseUp",\n      "onKeyPress",\n      "onKeyDown",\n      "onKeyUp"\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "handlers": [\n      "onClick",\n      "onMouseDown",\n      "onMouseUp",\n      "onKeyPress",\n      "onKeyDown",\n      "onKeyUp"\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/role-has-required-aria-props": {
    description:
      "Enforce that elements with ARIA roles must have all required attributes for that role",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/role-has-required-aria-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/role-supports-aria-props": {
    description:
      "Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/role-supports-aria-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/scope": {
    description: "Enforce `scope` prop is only used on `<th>` elements",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/scope.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-a11y/tabindex-no-positive": {
    description: "Enforce `tabIndex` value is not greater than zero",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules/tabindex-no-positive.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "jsx-quotes": {
    description:
      "Enforce the consistent use of either double or single quotes in JSX attributes",
    docsUrl: "https://eslint.org/docs/rules/jsx-quotes",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "key-spacing": {
    description:
      "Enforce consistent spacing between keys and values in object literal properties",
    docsUrl: "https://eslint.org/docs/rules/key-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "keyword-spacing": {
    description: "Enforce consistent spacing before and after keywords",
    docsUrl: "https://eslint.org/docs/rules/keyword-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "linebreak-style": {
    description: "Enforce consistent linebreak style",
    docsUrl: "https://eslint.org/docs/rules/linebreak-style",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "lines-around-comment": {
    description: "Require empty lines around comments",
    docsUrl: "https://eslint.org/docs/rules/lines-around-comment",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "lines-around-directive": {
    description: "Require or disallow newlines around directives",
    docsUrl: "https://eslint.org/docs/rules/lines-around-directive",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "after": "always", "before": "always" }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "after": "always", "before": "always" }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "lines-between-class-members": {
    description: "Require or disallow an empty line between class members",
    docsUrl: "https://eslint.org/docs/rules/lines-between-class-members",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  "always",\n  { "exceptAfterSingleLine": false, "exceptAfterOverload": true }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "off",\n  "always",\n  { "exceptAfterSingleLine": false, "exceptAfterOverload": true }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "max-classes-per-file": {
    description: "Enforce a maximum number of classes per file",
    docsUrl: "https://eslint.org/docs/rules/max-classes-per-file",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", 1]\n', level: "error" },
              ts: { entry: '["error", 1]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "max-len": {
    description: "Enforce a maximum line length",
    docsUrl: "https://eslint.org/docs/rules/max-len",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "multiline-ternary": {
    description: "Enforce newlines between operands of ternary expressions",
    docsUrl: "https://eslint.org/docs/rules/multiline-ternary",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "new-cap": {
    description: "Require constructor names to begin with a capital letter",
    docsUrl: "https://eslint.org/docs/rules/new-cap",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "capIsNew": false,\n    "capIsNewExceptions": ["Immutable.Map", "Immutable.Set", "Immutable.List"],\n    "newIsCap": true,\n    "newIsCapExceptions": [],\n    "properties": true\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "capIsNew": false,\n    "capIsNewExceptions": ["Immutable.Map", "Immutable.Set", "Immutable.List"],\n    "newIsCap": true,\n    "newIsCapExceptions": [],\n    "properties": true\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "new-parens": {
    description:
      "Enforce or disallow parentheses when invoking a constructor with no arguments",
    docsUrl: "https://eslint.org/docs/rules/new-parens",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "newline-per-chained-call": {
    description: "Require a newline after each call in a method chain",
    docsUrl: "https://eslint.org/docs/rules/newline-per-chained-call",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-alert": {
    description: "Disallow the use of `alert`, `confirm`, and `prompt`",
    docsUrl: "https://eslint.org/docs/rules/no-alert",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-array-constructor": {
    description: "Disallow `Array` constructors",
    docsUrl: "https://eslint.org/docs/rules/no-array-constructor",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-arrow-condition": {
    description: "Disallows arrow functions where test conditions are expected",
    docsUrl: "https://eslint.org/docs/rules/no-arrow-condition",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-async-promise-executor": {
    description: "Disallow using an async function as a Promise executor",
    docsUrl: "https://eslint.org/docs/rules/no-async-promise-executor",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-await-in-loop": {
    description: "Disallow `await` inside of loops",
    docsUrl: "https://eslint.org/docs/rules/no-await-in-loop",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-bitwise": {
    description: "Disallow bitwise operators",
    docsUrl: "https://eslint.org/docs/rules/no-bitwise",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-buffer-constructor": {
    description: "Disallow use of the `Buffer()` constructor",
    docsUrl: "https://eslint.org/docs/rules/no-buffer-constructor",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-caller": {
    description: "Disallow the use of `arguments.caller` or `arguments.callee`",
    docsUrl: "https://eslint.org/docs/rules/no-caller",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-case-declarations": {
    description: "Disallow lexical declarations in case clauses",
    docsUrl: "https://eslint.org/docs/rules/no-case-declarations",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-class-assign": {
    description: "Disallow reassigning class members",
    docsUrl: "https://eslint.org/docs/rules/no-class-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-comma-dangle": {
    description: "Disallows trailing commas in object and array literals",
    docsUrl: "https://eslint.org/docs/rules/no-comma-dangle",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-compare-neg-zero": {
    description: "Disallow comparing against -0",
    docsUrl: "https://eslint.org/docs/rules/no-compare-neg-zero",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-cond-assign": {
    description: "Disallow assignment operators in conditional expressions",
    docsUrl: "https://eslint.org/docs/rules/no-cond-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "except-parens"]\n', level: "error" },
              ts: { entry: '["error", "except-parens"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-confusing-arrow": {
    description:
      "Disallow arrow functions where they could be confused with comparisons",
    docsUrl: "https://eslint.org/docs/rules/no-confusing-arrow",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-console": {
    description: "Disallow the use of `console`",
    docsUrl: "https://eslint.org/docs/rules/no-console",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-const-assign": {
    description: "Disallow reassigning `const` variables",
    docsUrl: "https://eslint.org/docs/rules/no-const-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-constant-condition": {
    description: "Disallow constant expressions in conditions",
    docsUrl: "https://eslint.org/docs/rules/no-constant-condition",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-constructor-return": {
    description: "Disallow returning value in constructor",
    docsUrl: "https://eslint.org/docs/rules/no-constructor-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-continue": {
    description: "Disallow `continue` statements",
    docsUrl: "https://eslint.org/docs/rules/no-continue",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-control-regex": {
    description: "Disallow control characters in regular expressions",
    docsUrl: "https://eslint.org/docs/rules/no-control-regex",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-debugger": {
    description: "Disallow the use of `debugger`",
    docsUrl: "https://eslint.org/docs/rules/no-debugger",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-delete-var": {
    description: "Disallow deleting variables",
    docsUrl: "https://eslint.org/docs/rules/no-delete-var",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-dupe-args": {
    description: "Disallow duplicate arguments in `function` definitions",
    docsUrl: "https://eslint.org/docs/rules/no-dupe-args",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-dupe-class-members": {
    description: "Disallow duplicate class members",
    docsUrl: "https://eslint.org/docs/rules/no-dupe-class-members",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-dupe-else-if": {
    description: "Disallow duplicate conditions in `if-else-if` chains",
    docsUrl: "https://eslint.org/docs/rules/no-dupe-else-if",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-dupe-keys": {
    description: "Disallow duplicate keys in object literals",
    docsUrl: "https://eslint.org/docs/rules/no-dupe-keys",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-duplicate-case": {
    description: "Disallow duplicate case labels",
    docsUrl: "https://eslint.org/docs/rules/no-duplicate-case",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-else-return": {
    description:
      "Disallow `else` blocks after `return` statements in `if` statements",
    docsUrl: "https://eslint.org/docs/rules/no-else-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "allowElseIf": false }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "allowElseIf": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-empty": {
    description: "Disallow empty block statements",
    docsUrl: "https://eslint.org/docs/rules/no-empty",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-empty-character-class": {
    description: "Disallow empty character classes in regular expressions",
    docsUrl: "https://eslint.org/docs/rules/no-empty-character-class",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-empty-function": {
    description: "Disallow empty functions",
    docsUrl: "https://eslint.org/docs/rules/no-empty-function",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "allow": ["arrowFunctions", "functions", "methods"] }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["off", { "allow": ["arrowFunctions", "functions", "methods"] }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-empty-pattern": {
    description: "Disallow empty destructuring patterns",
    docsUrl: "https://eslint.org/docs/rules/no-empty-pattern",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-eval": {
    description: "Disallow the use of `eval()`",
    docsUrl: "https://eslint.org/docs/rules/no-eval",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-ex-assign": {
    description: "Disallow reassigning exceptions in `catch` clauses",
    docsUrl: "https://eslint.org/docs/rules/no-ex-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extend-native": {
    description: "Disallow extending native types",
    docsUrl: "https://eslint.org/docs/rules/no-extend-native",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extra-bind": {
    description: "Disallow unnecessary calls to `.bind()`",
    docsUrl: "https://eslint.org/docs/rules/no-extra-bind",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extra-boolean-cast": {
    description: "Disallow unnecessary boolean casts",
    docsUrl: "https://eslint.org/docs/rules/no-extra-boolean-cast",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extra-label": {
    description: "Disallow unnecessary labels",
    docsUrl: "https://eslint.org/docs/rules/no-extra-label",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extra-parens": {
    description: "Disallow unnecessary parentheses",
    docsUrl: "https://eslint.org/docs/rules/no-extra-parens",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-extra-semi": {
    description: "Disallow unnecessary semicolons",
    docsUrl: "https://eslint.org/docs/rules/no-extra-semi",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-fallthrough": {
    description: "Disallow fallthrough of `case` statements",
    docsUrl: "https://eslint.org/docs/rules/no-fallthrough",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-floating-decimal": {
    description:
      "Disallow leading or trailing decimal points in numeric literals",
    docsUrl: "https://eslint.org/docs/rules/no-floating-decimal",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-func-assign": {
    description: "Disallow reassigning `function` declarations",
    docsUrl: "https://eslint.org/docs/rules/no-func-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-global-assign": {
    description:
      "Disallow assignments to native objects or read-only global variables",
    docsUrl: "https://eslint.org/docs/rules/no-global-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "exceptions": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "exceptions": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-implied-eval": {
    description: "Disallow the use of `eval()`-like methods",
    docsUrl: "https://eslint.org/docs/rules/no-implied-eval",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-import-assign": {
    description: "Disallow assigning to imported bindings",
    docsUrl: "https://eslint.org/docs/rules/no-import-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-inner-declarations": {
    description:
      "Disallow variable or `function` declarations in nested blocks",
    docsUrl: "https://eslint.org/docs/rules/no-inner-declarations",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-invalid-regexp": {
    description:
      "Disallow invalid regular expression strings in `RegExp` constructors",
    docsUrl: "https://eslint.org/docs/rules/no-invalid-regexp",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-irregular-whitespace": {
    description: "Disallow irregular whitespace",
    docsUrl: "https://eslint.org/docs/rules/no-irregular-whitespace",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-iterator": {
    description: "Disallow the use of the `__iterator__` property",
    docsUrl: "https://eslint.org/docs/rules/no-iterator",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-label-var": {
    description: "Disallow labels that share a name with a variable",
    docsUrl: "https://eslint.org/docs/rules/no-label-var",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-labels": {
    description: "Disallow labeled statements",
    docsUrl: "https://eslint.org/docs/rules/no-labels",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "allowLoop": false, "allowSwitch": false }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "allowLoop": false, "allowSwitch": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-lone-blocks": {
    description: "Disallow unnecessary nested blocks",
    docsUrl: "https://eslint.org/docs/rules/no-lone-blocks",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-lonely-if": {
    description:
      "Disallow `if` statements as the only statement in `else` blocks",
    docsUrl: "https://eslint.org/docs/rules/no-lonely-if",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-loop-func": {
    description:
      "Disallow function declarations that contain unsafe references inside loop statements",
    docsUrl: "https://eslint.org/docs/rules/no-loop-func",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-loss-of-precision": {
    description: "Disallow Number Literals That Lose Precision",
    docsUrl: "https://eslint.org/docs/rules/no-loss-of-precision",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-misleading-character-class": {
    description:
      "Disallow characters which are made with multiple code points in character class syntax",
    docsUrl: "https://eslint.org/docs/rules/no-misleading-character-class",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-mixed-operators": {
    description: "Disallow mixed binary operators",
    docsUrl: "https://eslint.org/docs/rules/no-mixed-operators",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-mixed-spaces-and-tabs": {
    description: "Disallow mixed spaces and tabs for indentation",
    docsUrl: "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-multi-assign": {
    description: "Disallow use of chained assignment expressions",
    docsUrl: "https://eslint.org/docs/rules/no-multi-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-multi-spaces": {
    description: "Disallow multiple spaces",
    docsUrl: "https://eslint.org/docs/rules/no-multi-spaces",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-multi-str": {
    description: "Disallow multiline strings",
    docsUrl: "https://eslint.org/docs/rules/no-multi-str",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-multiple-empty-lines": {
    description: "Disallow multiple empty lines",
    docsUrl: "https://eslint.org/docs/rules/no-multiple-empty-lines",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new": {
    description:
      "Disallow `new` operators outside of assignments or comparisons",
    docsUrl: "https://eslint.org/docs/rules/no-new",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new-func": {
    description: "Disallow `new` operators with the `Function` object",
    docsUrl: "https://eslint.org/docs/rules/no-new-func",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new-object": {
    description: "Disallow `Object` constructors",
    docsUrl: "https://eslint.org/docs/rules/no-new-object",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new-require": {
    description: "Disallow `new` operators with calls to `require`",
    docsUrl: "https://eslint.org/docs/rules/no-new-require",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new-symbol": {
    description: "Disallow `new` operators with the `Symbol` object",
    docsUrl: "https://eslint.org/docs/rules/no-new-symbol",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-new-wrappers": {
    description:
      "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
    docsUrl: "https://eslint.org/docs/rules/no-new-wrappers",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-nonoctal-decimal-escape": {
    description: "Disallow `\\8` and `\\9` escape sequences in string literals",
    docsUrl: "https://eslint.org/docs/rules/no-nonoctal-decimal-escape",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-obj-calls": {
    description: "Disallow calling global object properties as functions",
    docsUrl: "https://eslint.org/docs/rules/no-obj-calls",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-octal": {
    description: "Disallow octal literals",
    docsUrl: "https://eslint.org/docs/rules/no-octal",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-octal-escape": {
    description: "Disallow octal escape sequences in string literals",
    docsUrl: "https://eslint.org/docs/rules/no-octal-escape",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-param-reassign": {
    description: "Disallow reassigning `function` parameters",
    docsUrl: "https://eslint.org/docs/rules/no-param-reassign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "ignorePropertyModificationsFor": [\n      "acc",\n      "accumulator",\n      "e",\n      "ctx",\n      "context",\n      "req",\n      "request",\n      "res",\n      "response",\n      "$scope",\n      "staticContext"\n    ],\n    "props": true\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "ignorePropertyModificationsFor": [\n      "acc",\n      "accumulator",\n      "e",\n      "ctx",\n      "context",\n      "req",\n      "request",\n      "res",\n      "response",\n      "$scope",\n      "staticContext"\n    ],\n    "props": true\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-path-concat": {
    description:
      "Disallow string concatenation with `__dirname` and `__filename`",
    docsUrl: "https://eslint.org/docs/rules/no-path-concat",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-plusplus": {
    description: "Disallow the unary operators `++` and `--`",
    docsUrl: "https://eslint.org/docs/rules/no-plusplus",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-promise-executor-return": {
    description: "Disallow returning values from Promise executor functions",
    docsUrl: "https://eslint.org/docs/rules/no-promise-executor-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-proto": {
    description: "Disallow the use of the `__proto__` property",
    docsUrl: "https://eslint.org/docs/rules/no-proto",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-prototype-builtins": {
    description:
      "Disallow calling some `Object.prototype` methods directly on objects",
    docsUrl: "https://eslint.org/docs/rules/no-prototype-builtins",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-redeclare": {
    description: "Disallow variable redeclaration",
    docsUrl: "https://eslint.org/docs/rules/no-redeclare",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-regex-spaces": {
    description: "Disallow multiple spaces in regular expressions",
    docsUrl: "https://eslint.org/docs/rules/no-regex-spaces",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-reserved-keys": {
    description:
      "Disallows unquoted reserved words as property names in object literals",
    docsUrl: "https://eslint.org/docs/rules/no-reserved-keys",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-restricted-exports": {
    description: "Disallow specified names in exports",
    docsUrl: "https://eslint.org/docs/rules/no-restricted-exports",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "restrictedNamedExports": ["default", "then"] }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "restrictedNamedExports": ["default", "then"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-restricted-globals": {
    description: "Disallow specified global variables",
    docsUrl: "https://eslint.org/docs/rules/no-restricted-globals",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  { "name": "isFinite", "message": "Use Number.isFinite instead." },\n  { "name": "isNaN", "message": "Use Number.isNaN instead." },\n  "addEventListener",\n  "blur",\n  "close",\n  "closed",\n  "confirm",\n  "defaultStatus",\n  "defaultstatus",\n  "event",\n  "external",\n  "find",\n  "focus",\n  "frameElement",\n  "frames",\n  "history",\n  "innerHeight",\n  "innerWidth",\n  "length",\n  "location",\n  "locationbar",\n  "menubar",\n  "moveBy",\n  "moveTo",\n  "name",\n  "onblur",\n  "onerror",\n  "onfocus",\n  "onload",\n  "onresize",\n  "onunload",\n  "open",\n  "opener",\n  "opera",\n  "outerHeight",\n  "outerWidth",\n  "pageXOffset",\n  "pageYOffset",\n  "parent",\n  "print",\n  "removeEventListener",\n  "resizeBy",\n  "resizeTo",\n  "screen",\n  "screenLeft",\n  "screenTop",\n  "screenX",\n  "screenY",\n  "scroll",\n  "scrollbars",\n  "scrollBy",\n  "scrollTo",\n  "scrollX",\n  "scrollY",\n  "self",\n  "status",\n  "statusbar",\n  "stop",\n  "toolbar",\n  "top"\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  { "name": "isFinite", "message": "Use Number.isFinite instead." },\n  { "name": "isNaN", "message": "Use Number.isNaN instead." },\n  "addEventListener",\n  "blur",\n  "close",\n  "closed",\n  "confirm",\n  "defaultStatus",\n  "defaultstatus",\n  "event",\n  "external",\n  "find",\n  "focus",\n  "frameElement",\n  "frames",\n  "history",\n  "innerHeight",\n  "innerWidth",\n  "length",\n  "location",\n  "locationbar",\n  "menubar",\n  "moveBy",\n  "moveTo",\n  "name",\n  "onblur",\n  "onerror",\n  "onfocus",\n  "onload",\n  "onresize",\n  "onunload",\n  "open",\n  "opener",\n  "opera",\n  "outerHeight",\n  "outerWidth",\n  "pageXOffset",\n  "pageYOffset",\n  "parent",\n  "print",\n  "removeEventListener",\n  "resizeBy",\n  "resizeTo",\n  "screen",\n  "screenLeft",\n  "screenTop",\n  "screenX",\n  "screenY",\n  "scroll",\n  "scrollbars",\n  "scrollBy",\n  "scrollTo",\n  "scrollX",\n  "scrollY",\n  "self",\n  "status",\n  "statusbar",\n  "stop",\n  "toolbar",\n  "top"\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-restricted-properties": {
    description: "Disallow certain properties on certain objects",
    docsUrl: "https://eslint.org/docs/rules/no-restricted-properties",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "message": "arguments.callee is deprecated.",\n    "object": "arguments",\n    "property": "callee"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "global",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "self",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "window",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "global",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "self",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "window",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Object.defineProperty instead.",\n    "property": "__defineGetter__"\n  },\n  {\n    "message": "Please use Object.defineProperty instead.",\n    "property": "__defineSetter__"\n  },\n  {\n    "message": "Use the exponentiation operator (**) instead.",\n    "object": "Math",\n    "property": "pow"\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "message": "arguments.callee is deprecated.",\n    "object": "arguments",\n    "property": "callee"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "global",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "self",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isFinite instead.",\n    "object": "window",\n    "property": "isFinite"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "global",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "self",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Number.isNaN instead.",\n    "object": "window",\n    "property": "isNaN"\n  },\n  {\n    "message": "Please use Object.defineProperty instead.",\n    "property": "__defineGetter__"\n  },\n  {\n    "message": "Please use Object.defineProperty instead.",\n    "property": "__defineSetter__"\n  },\n  {\n    "message": "Use the exponentiation operator (**) instead.",\n    "object": "Math",\n    "property": "pow"\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-restricted-syntax": {
    description: "Disallow specified syntax",
    docsUrl: "https://eslint.org/docs/rules/no-restricted-syntax",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "selector": "ForInStatement",\n    "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."\n  },\n  {\n    "selector": "ForOfStatement",\n    "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."\n  },\n  {\n    "selector": "LabeledStatement",\n    "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."\n  },\n  {\n    "selector": "WithStatement",\n    "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "selector": "ForInStatement",\n    "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."\n  },\n  {\n    "selector": "ForOfStatement",\n    "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."\n  },\n  {\n    "selector": "LabeledStatement",\n    "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."\n  },\n  {\n    "selector": "WithStatement",\n    "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-return-assign": {
    description: "Disallow assignment operators in `return` statements",
    docsUrl: "https://eslint.org/docs/rules/no-return-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-return-await": {
    description: "Disallow unnecessary `return await`",
    docsUrl: "https://eslint.org/docs/rules/no-return-await",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-script-url": {
    description: "Disallow `javascript:` urls",
    docsUrl: "https://eslint.org/docs/rules/no-script-url",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-self-assign": {
    description: "Disallow assignments where both sides are exactly the same",
    docsUrl: "https://eslint.org/docs/rules/no-self-assign",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", { "props": true }]\n', level: "error" },
              ts: { entry: '["error", { "props": true }]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-self-compare": {
    description: "Disallow comparisons where both sides are exactly the same",
    docsUrl: "https://eslint.org/docs/rules/no-self-compare",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-sequences": {
    description: "Disallow comma operators",
    docsUrl: "https://eslint.org/docs/rules/no-sequences",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-setter-return": {
    description: "Disallow returning values from setters",
    docsUrl: "https://eslint.org/docs/rules/no-setter-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-shadow": {
    description:
      "Disallow variable declarations from shadowing variables declared in the outer scope",
    docsUrl: "https://eslint.org/docs/rules/no-shadow",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-shadow-restricted-names": {
    description: "Disallow identifiers from shadowing restricted names",
    docsUrl: "https://eslint.org/docs/rules/no-shadow-restricted-names",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-space-before-semi": {
    description: "Disallows spaces before semicolons",
    docsUrl: "https://eslint.org/docs/rules/no-space-before-semi",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-spaced-func": {
    description:
      "Disallow spacing between function identifiers and their applications",
    docsUrl: "https://eslint.org/docs/rules/no-spaced-func",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-sparse-arrays": {
    description: "Disallow sparse arrays",
    docsUrl: "https://eslint.org/docs/rules/no-sparse-arrays",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-tabs": {
    description: "Disallow all tabs",
    docsUrl: "https://eslint.org/docs/rules/no-tabs",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-template-curly-in-string": {
    description:
      "Disallow template literal placeholder syntax in regular strings",
    docsUrl: "https://eslint.org/docs/rules/no-template-curly-in-string",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-this-before-super": {
    description:
      "Disallow `this`/`super` before calling `super()` in constructors",
    docsUrl: "https://eslint.org/docs/rules/no-this-before-super",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-throw-literal": {
    description: "Disallow throwing literals as exceptions",
    docsUrl: "https://eslint.org/docs/rules/no-throw-literal",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-trailing-spaces": {
    description: "Disallow trailing whitespace at the end of lines",
    docsUrl: "https://eslint.org/docs/rules/no-trailing-spaces",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-undef": {
    description: "Disallow the use of undeclared variables",
    docsUrl: "https://eslint.org/docs/rules/no-undef",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-undef-init": {
    description: "Disallow initializing variables to `undefined`",
    docsUrl: "https://eslint.org/docs/rules/no-undef-init",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unexpected-multiline": {
    description: "Disallow confusing multiline expressions",
    docsUrl: "https://eslint.org/docs/rules/no-unexpected-multiline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unneeded-ternary": {
    description: "Disallow ternary operators when simpler alternatives exist",
    docsUrl: "https://eslint.org/docs/rules/no-unneeded-ternary",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "defaultAssignment": false }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "defaultAssignment": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unreachable": {
    description:
      "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
    docsUrl: "https://eslint.org/docs/rules/no-unreachable",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unreachable-loop": {
    description: "Disallow loops with a body that allows only one iteration",
    docsUrl: "https://eslint.org/docs/rules/no-unreachable-loop",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", { "ignore": [] }]\n', level: "error" },
              ts: { entry: '["error", { "ignore": [] }]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unsafe-finally": {
    description: "Disallow control flow statements in `finally` blocks",
    docsUrl: "https://eslint.org/docs/rules/no-unsafe-finally",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unsafe-negation": {
    description: "Disallow negating the left operand of relational operators",
    docsUrl: "https://eslint.org/docs/rules/no-unsafe-negation",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unsafe-optional-chaining": {
    description:
      "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
    docsUrl: "https://eslint.org/docs/rules/no-unsafe-optional-chaining",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "disallowArithmeticOperators": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "disallowArithmeticOperators": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unused-expressions": {
    description: "Disallow unused expressions",
    docsUrl: "https://eslint.org/docs/rules/no-unused-expressions",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "allowShortCircuit": true,\n    "allowTaggedTemplates": true,\n    "allowTernary": true,\n    "enforceForJSX": false\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "allowShortCircuit": true,\n    "allowTaggedTemplates": true,\n    "allowTernary": true,\n    "enforceForJSX": false\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unused-labels": {
    description: "Disallow unused labels",
    docsUrl: "https://eslint.org/docs/rules/no-unused-labels",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-unused-vars": {
    description: "Disallow unused variables",
    docsUrl: "https://eslint.org/docs/rules/no-unused-vars",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "warn",\n  {\n    "args": "after-used",\n    "argsIgnorePattern": "^_",\n    "ignoreRestSiblings": true,\n    "vars": "all"\n  }\n]\n',
                level: "warn",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "args": "after-used",\n    "argsIgnorePattern": "^_",\n    "ignoreRestSiblings": true,\n    "vars": "all"\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-backreference": {
    description: "Disallow useless backreferences in regular expressions",
    docsUrl: "https://eslint.org/docs/rules/no-useless-backreference",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-catch": {
    description: "Disallow unnecessary `catch` clauses",
    docsUrl: "https://eslint.org/docs/rules/no-useless-catch",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-computed-key": {
    description:
      "Disallow unnecessary computed property keys in object literals",
    docsUrl: "https://eslint.org/docs/rules/no-useless-computed-key",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-concat": {
    description:
      "Disallow unnecessary concatenation of literals or template literals",
    docsUrl: "https://eslint.org/docs/rules/no-useless-concat",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-constructor": {
    description: "Disallow unnecessary constructors",
    docsUrl: "https://eslint.org/docs/rules/no-useless-constructor",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-escape": {
    description: "Disallow unnecessary escape characters",
    docsUrl: "https://eslint.org/docs/rules/no-useless-escape",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-rename": {
    description:
      "Disallow renaming import, export, and destructured assignments to the same name",
    docsUrl: "https://eslint.org/docs/rules/no-useless-rename",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  { "ignoreDestructuring": false, "ignoreExport": false, "ignoreImport": false }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  { "ignoreDestructuring": false, "ignoreExport": false, "ignoreImport": false }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-useless-return": {
    description: "Disallow redundant return statements",
    docsUrl: "https://eslint.org/docs/rules/no-useless-return",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-var": {
    description: "Require `let` or `const` instead of `var`",
    docsUrl: "https://eslint.org/docs/rules/no-var",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-whitespace-before-property": {
    description: "Disallow whitespace before properties",
    docsUrl: "https://eslint.org/docs/rules/no-whitespace-before-property",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-with": {
    description: "Disallow `with` statements",
    docsUrl: "https://eslint.org/docs/rules/no-with",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "no-wrap-func": {
    description:
      "Disallows unnecessary parentheses around function expressions",
    docsUrl: "https://eslint.org/docs/rules/no-wrap-func",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "nonblock-statement-body-position": {
    description: "Enforce the location of single-line statements",
    docsUrl: "https://eslint.org/docs/rules/nonblock-statement-body-position",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "object-curly-newline": {
    description:
      "Enforce consistent line breaks after opening and before closing braces",
    docsUrl: "https://eslint.org/docs/rules/object-curly-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "object-curly-spacing": {
    description: "Enforce consistent spacing inside braces",
    docsUrl: "https://eslint.org/docs/rules/object-curly-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "object-property-newline": {
    description: "Enforce placing object properties on separate lines",
    docsUrl: "https://eslint.org/docs/rules/object-property-newline",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "object-shorthand": {
    description:
      "Require or disallow method and property shorthand syntax for object literals",
    docsUrl: "https://eslint.org/docs/rules/object-shorthand",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", "always", { "avoidQuotes": true, "ignoreConstructors": false }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", "always", { "avoidQuotes": true, "ignoreConstructors": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "one-var": {
    description:
      "Enforce variables to be declared either together or separately in functions",
    docsUrl: "https://eslint.org/docs/rules/one-var",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "never"]\n', level: "error" },
              ts: { entry: '["error", "never"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "one-var-declaration-per-line": {
    description: "Require or disallow newlines around variable declarations",
    docsUrl: "https://eslint.org/docs/rules/one-var-declaration-per-line",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "operator-assignment": {
    description:
      "Require or disallow assignment operator shorthand where possible",
    docsUrl: "https://eslint.org/docs/rules/operator-assignment",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "operator-linebreak": {
    description: "Enforce consistent linebreak style for operators",
    docsUrl: "https://eslint.org/docs/rules/operator-linebreak",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "padded-blocks": {
    description: "Require or disallow padding within blocks",
    docsUrl: "https://eslint.org/docs/rules/padded-blocks",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-arrow-callback": {
    description: "Require using arrow functions for callbacks",
    docsUrl: "https://eslint.org/docs/rules/prefer-arrow-callback",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "allowNamedFunctions": false, "allowUnboundThis": true }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "allowNamedFunctions": false, "allowUnboundThis": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-const": {
    description:
      "Require `const` declarations for variables that are never reassigned after declared",
    docsUrl: "https://eslint.org/docs/rules/prefer-const",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "destructuring": "any", "ignoreReadBeforeAssign": true }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "destructuring": "any", "ignoreReadBeforeAssign": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-destructuring": {
    description: "Require destructuring from arrays and/or objects",
    docsUrl: "https://eslint.org/docs/rules/prefer-destructuring",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "AssignmentExpression": { "array": true, "object": false },\n    "VariableDeclarator": { "array": false, "object": true }\n  },\n  { "enforceForRenamedProperties": false }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "AssignmentExpression": { "array": true, "object": false },\n    "VariableDeclarator": { "array": false, "object": true }\n  },\n  { "enforceForRenamedProperties": false }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-exponentiation-operator": {
    description: "Disallow the use of `Math.pow` in favor of the `**` operator",
    docsUrl: "https://eslint.org/docs/rules/prefer-exponentiation-operator",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-numeric-literals": {
    description:
      "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
    docsUrl: "https://eslint.org/docs/rules/prefer-numeric-literals",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-object-spread": {
    description:
      "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead",
    docsUrl: "https://eslint.org/docs/rules/prefer-object-spread",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-promise-reject-errors": {
    description: "Require using Error objects as Promise rejection reasons",
    docsUrl: "https://eslint.org/docs/rules/prefer-promise-reject-errors",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "allowEmptyReject": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "allowEmptyReject": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-regex-literals": {
    description:
      "Disallow use of the `RegExp` constructor in favor of regular expression literals",
    docsUrl: "https://eslint.org/docs/rules/prefer-regex-literals",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "disallowRedundantWrapping": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "disallowRedundantWrapping": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-rest-params": {
    description: "Require rest parameters instead of `arguments`",
    docsUrl: "https://eslint.org/docs/rules/prefer-rest-params",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-spread": {
    description: "Require spread operators instead of `.apply()`",
    docsUrl: "https://eslint.org/docs/rules/prefer-spread",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "prefer-template": {
    description: "Require template literals instead of string concatenation",
    docsUrl: "https://eslint.org/docs/rules/prefer-template",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "quote-props": {
    description: "Require quotes around object literal property names",
    docsUrl: "https://eslint.org/docs/rules/quote-props",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  quotes: {
    description:
      "Enforce the consistent use of either backticks, double, or single quotes",
    docsUrl: "https://eslint.org/docs/rules/quotes",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  radix: {
    description:
      "Enforce the consistent use of the radix argument when using `parseInt()`",
    docsUrl: "https://eslint.org/docs/rules/radix",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react-hooks/exhaustive-deps": {
    description: "Checks effect dependencies",
    docsUrl:
      "https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react-hooks/rules-of-hooks": {
    description: "Checks rules of Hooks",
    docsUrl:
      "https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/boolean-prop-naming": {
    description: "Enforces consistent naming for boolean props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/boolean-prop-naming.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "off",\n  {\n    "message": "",\n    "propTypeNames": ["bool", "mutuallyExclusiveTrueProps"],\n    "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+"\n  }\n]\n',
                level: "off",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "message": "",\n    "propTypeNames": ["bool", "mutuallyExclusiveTrueProps"],\n    "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+"\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/button-has-type": {
    description: 'Forbid "button" element without an explicit "type" attribute',
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/button-has-type.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "button": true, "reset": false, "submit": true }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "button": true, "reset": false, "submit": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/default-props-match-prop-types": {
    description:
      'Enforce all defaultProps are defined and not "required" in propTypes',
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/default-props-match-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "allowRequiredDefaults": false }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "allowRequiredDefaults": false }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/destructuring-assignment": {
    description:
      "Enforce consistent usage of destructuring assignment of props, state, and context",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/destructuring-assignment.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/display-name": {
    description: "Prevent missing displayName in a React component definition",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/display-name.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["off", { "ignoreTranspilerName": false }]\n',
                level: "off",
              },
              ts: {
                entry: '["off", { "ignoreTranspilerName": false }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/forbid-component-props": {
    description: "Forbid certain props on components",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/forbid-component-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off", { "forbid": [] }]\n', level: "off" },
              ts: { entry: '["off", { "forbid": [] }]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/forbid-dom-props": {
    description: "Forbid certain props on DOM Nodes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/forbid-dom-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off", { "forbid": [] }]\n', level: "off" },
              ts: { entry: '["off", { "forbid": [] }]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/forbid-elements": {
    description: "Forbid certain elements",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/forbid-elements.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off", { "forbid": [] }]\n', level: "off" },
              ts: { entry: '["off", { "forbid": [] }]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/forbid-foreign-prop-types": {
    description: "Forbid using another component's propTypes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/forbid-foreign-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["warn", { "allowInPropTypes": true }]\n',
                level: "warn",
              },
              ts: {
                entry: '["warn", { "allowInPropTypes": true }]\n',
                level: "warn",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/forbid-prop-types": {
    description: "Forbid certain propTypes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/forbid-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "checkChildContextTypes": true,\n    "checkContextTypes": true,\n    "forbid": ["any", "array", "object"]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "checkChildContextTypes": true,\n    "checkContextTypes": true,\n    "forbid": ["any", "array", "object"]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/function-component-definition": {
    description: "Standardize the way function component get defined (fixable)",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/function-component-definition.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  { "namedComponents": "arrow-function", "unnamedComponents": "arrow-function" }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  { "namedComponents": "arrow-function", "unnamedComponents": "arrow-function" }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-boolean-value": {
    description: "Enforce boolean attributes notation in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-boolean-value.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", "never", { "always": [] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", "never", { "always": [] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-child-element-spacing": {
    description:
      "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-child-element-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-closing-bracket-location": {
    description: "Enforce closing bracket location in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-closing-bracket-location.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-closing-tag-location": {
    description: "Enforce closing tag location for multiline JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-closing-tag-location.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-curly-brace-presence": {
    description:
      "Disallow unnecessary JSX expressions when literals alone are sufficient or enfore JSX expressions on literals in JSX children or attributes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-curly-brace-presence.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "children": "never", "props": "never" }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "children": "never", "props": "never" }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-curly-newline": {
    description:
      "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-curly-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-curly-spacing": {
    description:
      "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-curly-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-equals-spacing": {
    description:
      "Enforce or disallow spaces around equal signs in JSX attributes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-equals-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-filename-extension": {
    description: "Restrict file extensions that may contain JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-filename-extension.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "extensions": [".jsx", ".tsx"] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "extensions": [".jsx", ".tsx"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-first-prop-new-line": {
    description: "Enforce proper position of the first property in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-first-prop-new-line.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-fragments": {
    description: "Enforce shorthand or standard form for React fragments",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-fragments.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error", "syntax"]\n', level: "error" },
              ts: { entry: '["error", "syntax"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-handler-names": {
    description: "Enforce event handler naming conventions in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-handler-names.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["off", { "eventHandlerPrefix": "handle", "eventHandlerPropPrefix": "on" }]\n',
                level: "off",
              },
              ts: {
                entry:
                  '["off", { "eventHandlerPrefix": "handle", "eventHandlerPropPrefix": "on" }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-indent": {
    description: "Enforce JSX indentation",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-indent.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-indent-props": {
    description: "Enforce props indentation in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-indent-props.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-key": {
    description: "Report missing `key` props in iterators/collection literals",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-key.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-max-depth": {
    description: "Validate JSX maximum depth",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-max-depth.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-max-props-per-line": {
    description: "Enforce maximum of props on a single line in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-max-props-per-line.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-newline": {
    description:
      "Require or prevent a new line after jsx elements and expressions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-bind": {
    description:
      "Prevents usage of Function.prototype.bind and arrow functions in React component props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-bind.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "allowArrowFunctions": true,\n    "allowBind": false,\n    "allowFunctions": false,\n    "ignoreDOMComponents": true,\n    "ignoreRefs": true\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "allowArrowFunctions": true,\n    "allowBind": false,\n    "allowFunctions": false,\n    "ignoreDOMComponents": true,\n    "ignoreRefs": true\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-comment-textnodes": {
    description:
      "Comments inside children section of tag should be placed inside braces",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-comment-textnodes.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-constructed-context-values": {
    description: "Prevent react contexts from taking non-stable values",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-constructed-context-values.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-duplicate-props": {
    description: "Enforce no duplicate props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-duplicate-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignoreCase": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignoreCase": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-literals": {
    description: "Prevent using string literals in React component definition",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-literals.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off", { "noStrings": true }]\n', level: "off" },
              ts: { entry: '["off", { "noStrings": true }]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-script-url": {
    description: "Forbid `javascript:` URLs",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-script-url.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", [{ "name": "Link", "props": ["to"] }]]\n',
                level: "error",
              },
              ts: {
                entry: '["error", [{ "name": "Link", "props": ["to"] }]]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-target-blank": {
    description:
      'Forbid target="_blank" attribute without rel="noopener noreferrer"',
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-target-blank.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "enforceDynamicLinks": "always", "forms": false, "links": true }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["error", { "enforceDynamicLinks": "always", "forms": false, "links": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-undef": {
    description: "Disallow undeclared variables in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-undef.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-no-useless-fragment": {
    description: "Disallow unnecessary fragments",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-no-useless-fragment.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-one-expression-per-line": {
    description: "Require one JSX element per line",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-one-expression-per-line.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-pascal-case": {
    description: "Enforce PascalCase for user-defined JSX components",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-pascal-case.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  { "allowAllCaps": true, "allowLeadingUnderscore": true, "ignore": [] }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  { "allowAllCaps": true, "allowLeadingUnderscore": true, "ignore": [] }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-props-no-multi-spaces": {
    description: "Disallow multiple spaces between inline JSX props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-props-no-multi-spaces.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-sort-default-props": {
    description: "Enforce defaultProps declarations alphabetical sorting",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-sort-default-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off", { "ignoreCase": true }]\n', level: "off" },
              ts: { entry: '["off", { "ignoreCase": true }]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-sort-prop-types": {
    description: "Enforce propTypes declarations alphabetical sorting",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-sort-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-sort-props": {
    description: "Enforce props alphabetical sorting",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-sort-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "off",\n  {\n    "callbacksLast": false,\n    "ignoreCase": true,\n    "noSortAlphabetically": false,\n    "reservedFirst": true,\n    "shorthandFirst": false,\n    "shorthandLast": false\n  }\n]\n',
                level: "off",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "callbacksLast": false,\n    "ignoreCase": true,\n    "noSortAlphabetically": false,\n    "reservedFirst": true,\n    "shorthandFirst": false,\n    "shorthandLast": false\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-space-before-closing": {
    description: "Enforce spacing before closing bracket in JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-space-before-closing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-tag-spacing": {
    description:
      "Enforce whitespace in and around the JSX opening and closing brackets",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-tag-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-uses-react": {
    description: "Prevent React to be marked as unused",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-uses-react.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-uses-vars": {
    description: "Prevent variables used in JSX to be marked as unused",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-uses-vars.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/jsx-wrap-multilines": {
    description: "Disallow missing parentheses around multiline JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/jsx-wrap-multilines.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-access-state-in-setstate": {
    description: "Reports when this.state is accessed within setState",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-access-state-in-setstate.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-adjacent-inline-elements": {
    description: "Prevent adjacent inline elements not separated by whitespace",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-adjacent-inline-elements.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-array-index-key": {
    description: "Prevent usage of Array index in keys",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-array-index-key.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-arrow-function-lifecycle": {
    description:
      "Lifecycle methods should be methods on the prototype, not class fields",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-arrow-function-lifecycle.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-children-prop": {
    description: "Prevent passing of children as props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-children-prop.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-danger": {
    description: "Prevent usage of dangerous JSX props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-danger.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-danger-with-children": {
    description:
      "Report when a DOM element is using both children and dangerouslySetInnerHTML",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-danger-with-children.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-deprecated": {
    description: "Prevent usage of deprecated methods",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-deprecated.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-did-mount-set-state": {
    description: "Prevent usage of setState in componentDidMount",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-did-mount-set-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-did-update-set-state": {
    description: "Prevent usage of setState in componentDidUpdate",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-did-update-set-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-direct-mutation-state": {
    description: "Prevent direct mutation of this.state",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-direct-mutation-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-find-dom-node": {
    description: "Prevent usage of findDOMNode",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-find-dom-node.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-invalid-html-attribute": {
    description: "Prevent usage of invalid attributes",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-invalid-html-attribute.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-is-mounted": {
    description: "Prevent usage of isMounted",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-is-mounted.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-multi-comp": {
    description: "Prevent multiple component definition per file",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-multi-comp.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-namespace": {
    description: "Enforce that namespaces are not used in React elements",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-namespace.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-redundant-should-component-update": {
    description: "Flag shouldComponentUpdate when extending PureComponent",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-redundant-should-component-update.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-render-return-value": {
    description: "Prevent usage of the return value of React.render",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-render-return-value.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-set-state": {
    description: "Prevent usage of setState",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-set-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-string-refs": {
    description:
      "Prevent string definitions for references and prevent referencing this.refs",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-string-refs.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-this-in-sfc": {
    description: 'Report "this" being used in stateless components',
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-this-in-sfc.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-typos": {
    description: "Prevent common typos",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-typos.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unescaped-entities": {
    description:
      "Detect unescaped HTML entities, which might represent malformed tags",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unescaped-entities.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unknown-property": {
    description: "Prevent usage of unknown DOM property",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unknown-property.md",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignore": ["css", "jsx", "global"] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignore": ["css", "jsx", "global"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignore": ["css"] }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignore": ["css"] }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unsafe": {
    description: "Prevent usage of unsafe lifecycle methods",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unsafe.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unstable-nested-components": {
    description: "Prevent creating unstable components inside components",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unstable-nested-components.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unused-class-component-methods": {
    description: "Prevent declaring unused methods of component class",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unused-class-component-methods.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unused-prop-types": {
    description: "Prevent definitions of unused prop types",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unused-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["warn", { "customValidators": [], "skipShapeProps": true }]\n',
                level: "warn",
              },
              ts: {
                entry:
                  '["warn", { "customValidators": [], "skipShapeProps": true }]\n',
                level: "warn",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-unused-state": {
    description: "Prevent definition of unused state fields",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-unused-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/no-will-update-set-state": {
    description: "Prevent usage of setState in componentWillUpdate",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/no-will-update-set-state.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/prefer-es6-class": {
    description: "Enforce ES5 or ES6 class for React Components",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/prefer-es6-class.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/prefer-exact-props": {
    description: "Prefer exact proptype definitions",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/prefer-exact-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/prefer-read-only-props": {
    description: "Require read-only props",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/prefer-read-only-props.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/prefer-stateless-function": {
    description:
      "Enforce stateless components to be written as a pure function",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/prefer-stateless-function.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "ignorePureComponents": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["error", { "ignorePureComponents": true }]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/prop-types": {
    description:
      "Prevent missing props validation in a React component definition",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '["error", { "customValidators": [], "ignore": [], "skipUndeclared": false }]\n',
                level: "error",
              },
              ts: {
                entry:
                  '["off", { "customValidators": [], "ignore": [], "skipUndeclared": false }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/react-in-jsx-scope": {
    description: "Prevent missing React when using JSX",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/react-in-jsx-scope.md",
    usedBy: {
      next: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/require-optimization": {
    description:
      "Enforce React components to have a shouldComponentUpdate method",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/require-optimization.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["off", { "allowDecorators": [] }]\n',
                level: "off",
              },
              ts: {
                entry: '["off", { "allowDecorators": [] }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/require-render-return": {
    description:
      "Enforce ES5 or ES6 class for returning value in render function",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/require-render-return.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/self-closing-comp": {
    description: "Prevent extra closing tags for components without children",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/self-closing-comp.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/sort-comp": {
    description: "Enforce component methods order",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/sort-comp.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "groups": {\n      "lifecycle": [\n        "displayName",\n        "propTypes",\n        "contextTypes",\n        "childContextTypes",\n        "mixins",\n        "statics",\n        "defaultProps",\n        "constructor",\n        "getDefaultProps",\n        "getInitialState",\n        "state",\n        "getChildContext",\n        "getDerivedStateFromProps",\n        "componentWillMount",\n        "UNSAFE_componentWillMount",\n        "componentDidMount",\n        "componentWillReceiveProps",\n        "UNSAFE_componentWillReceiveProps",\n        "shouldComponentUpdate",\n        "componentWillUpdate",\n        "UNSAFE_componentWillUpdate",\n        "getSnapshotBeforeUpdate",\n        "componentDidUpdate",\n        "componentDidCatch",\n        "componentWillUnmount"\n      ],\n      "rendering": ["/^render.+$/", "render"]\n    },\n    "order": [\n      "static-variables",\n      "static-methods",\n      "instance-variables",\n      "lifecycle",\n      "/^handle.+$/",\n      "/^on.+$/",\n      "getters",\n      "setters",\n      "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",\n      "instance-methods",\n      "everything-else",\n      "rendering"\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "groups": {\n      "lifecycle": [\n        "displayName",\n        "propTypes",\n        "contextTypes",\n        "childContextTypes",\n        "mixins",\n        "statics",\n        "defaultProps",\n        "constructor",\n        "getDefaultProps",\n        "getInitialState",\n        "state",\n        "getChildContext",\n        "getDerivedStateFromProps",\n        "componentWillMount",\n        "UNSAFE_componentWillMount",\n        "componentDidMount",\n        "componentWillReceiveProps",\n        "UNSAFE_componentWillReceiveProps",\n        "shouldComponentUpdate",\n        "componentWillUpdate",\n        "UNSAFE_componentWillUpdate",\n        "getSnapshotBeforeUpdate",\n        "componentDidUpdate",\n        "componentDidCatch",\n        "componentWillUnmount"\n      ],\n      "rendering": ["/^render.+$/", "render"]\n    },\n    "order": [\n      "static-variables",\n      "static-methods",\n      "instance-variables",\n      "lifecycle",\n      "/^handle.+$/",\n      "/^on.+$/",\n      "getters",\n      "setters",\n      "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",\n      "instance-methods",\n      "everything-else",\n      "rendering"\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/sort-prop-types": {
    description: "Enforce propTypes declarations alphabetical sorting",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/sort-prop-types.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "off",\n  {\n    "callbacksLast": false,\n    "ignoreCase": true,\n    "requiredFirst": false,\n    "sortShapeProp": true\n  }\n]\n',
                level: "off",
              },
              ts: {
                entry:
                  '[\n  "off",\n  {\n    "callbacksLast": false,\n    "ignoreCase": true,\n    "requiredFirst": false,\n    "sortShapeProp": true\n  }\n]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/state-in-constructor": {
    description:
      "State initialization in an ES6 class component should be in a constructor",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/state-in-constructor.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error", "always"]\n', level: "error" },
              ts: { entry: '["error", "always"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/static-property-placement": {
    description:
      "Defines where React component static properties should be positioned",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/static-property-placement.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", "property assignment"]\n',
                level: "error",
              },
              ts: {
                entry: '["error", "property assignment"]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/style-prop-object": {
    description: "Enforce style prop value is an object",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/style-prop-object.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "react/void-dom-elements-no-children": {
    description:
      "Prevent passing of children to void DOM elements (e.g. <br />)",
    docsUrl:
      "https://github.com/jsx-eslint/eslint-plugin-react/tree/main/docs/rules/void-dom-elements-no-children.md",
    usedBy: {
      react: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "require-yield": {
    description: "Require generator functions to contain `yield`",
    docsUrl: "https://eslint.org/docs/rules/require-yield",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "rest-spread-spacing": {
    description:
      "Enforce spacing between rest and spread operators and their expressions",
    docsUrl: "https://eslint.org/docs/rules/rest-spread-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  semi: {
    description: "Require or disallow semicolons instead of ASI",
    docsUrl: "https://eslint.org/docs/rules/semi",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "semi-spacing": {
    description: "Enforce consistent spacing before and after semicolons",
    docsUrl: "https://eslint.org/docs/rules/semi-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "semi-style": {
    description: "Enforce location of semicolons",
    docsUrl: "https://eslint.org/docs/rules/semi-style",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "simple-import-sort/exports": {
    description: "Enforce sorting of the exports",
    docsUrl: "https://github.com/lydell/eslint-plugin-simple-import-sort",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "simple-import-sort/imports": {
    description: "Enforce sorting of the imports",
    docsUrl: "https://github.com/lydell/eslint-plugin-simple-import-sort",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  {\n    "groups": [\n      [\n        "^\\\\u0000",\n        "^react(/.*)?(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(@\\\\/|~[^/]*\\\\/).*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^\\\\..*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(\\\\u0000$)$",\n        "^(@\\\\/|~[^/]*\\\\/).*(\\\\u0000$)$",\n        "^\\\\..*(\\\\u0000$)$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(.(css|scss|sass|less))$",\n        "^(@\\\\/|~[^/]*\\\\/).*(.(css|scss|sass|less))$",\n        "^\\\\..*(.(css|scss|sass|less))$"\n      ]\n    ]\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  {\n    "groups": [\n      [\n        "^\\\\u0000",\n        "^react(/.*)?(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(@\\\\/|~[^/]*\\\\/).*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^\\\\..*(?<!(.(css|scss|sass|less)|\\\\u0000$))$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(\\\\u0000$)$",\n        "^(@\\\\/|~[^/]*\\\\/).*(\\\\u0000$)$",\n        "^\\\\..*(\\\\u0000$)$",\n        "^(?!(@\\\\/|~[^/]*\\\\/))(@?\\\\w).*(.(css|scss|sass|less))$",\n        "^(@\\\\/|~[^/]*\\\\/).*(.(css|scss|sass|less))$",\n        "^\\\\..*(.(css|scss|sass|less))$"\n      ]\n    ]\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-after-function-name": {
    description:
      "Enforces consistent spacing after name in function definitions",
    docsUrl: "https://eslint.org/docs/rules/space-after-function-name",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-after-keywords": {
    description: "Enforces consistent spacing after keywords",
    docsUrl: "https://eslint.org/docs/rules/space-after-keywords",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-before-blocks": {
    description: "Enforce consistent spacing before blocks",
    docsUrl: "https://eslint.org/docs/rules/space-before-blocks",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-before-function-paren": {
    description:
      "Enforce consistent spacing before `function` definition opening parenthesis",
    docsUrl: "https://eslint.org/docs/rules/space-before-function-paren",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-before-function-parentheses": {
    description:
      "Enforces consistent spacing before opening parenthesis in function definitions",
    docsUrl: "https://eslint.org/docs/rules/space-before-function-parentheses",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-before-keywords": {
    description: "Enforces consistent spacing before keywords",
    docsUrl: "https://eslint.org/docs/rules/space-before-keywords",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-in-brackets": {
    description:
      "Enforces consistent spacing inside braces of object literals and brackets of array literals",
    docsUrl: "https://eslint.org/docs/rules/space-in-brackets",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-in-parens": {
    description: "Enforce consistent spacing inside parentheses",
    docsUrl: "https://eslint.org/docs/rules/space-in-parens",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-infix-ops": {
    description: "Require spacing around infix operators",
    docsUrl: "https://eslint.org/docs/rules/space-infix-ops",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-return-throw-case": {
    description: "Requires spaces after `return`, `throw`, and `case` keywords",
    docsUrl: "https://eslint.org/docs/rules/space-return-throw-case",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-unary-ops": {
    description: "Enforce consistent spacing before or after unary operators",
    docsUrl: "https://eslint.org/docs/rules/space-unary-ops",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "space-unary-word-ops": {
    description: "Requires spaces after unary word operators",
    docsUrl: "https://eslint.org/docs/rules/space-unary-word-ops",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "spaced-comment": {
    description:
      "Enforce consistent spacing after the `//` or `/*` in a comment",
    docsUrl: "https://eslint.org/docs/rules/spaced-comment",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry:
                  '[\n  "error",\n  "always",\n  {\n    "block": {\n      "balanced": true,\n      "exceptions": ["-", "+"],\n      "markers": ["=", "!", ":", "::"]\n    },\n    "line": { "exceptions": ["-", "+"], "markers": ["=", "!", "/"] }\n  }\n]\n',
                level: "error",
              },
              ts: {
                entry:
                  '[\n  "error",\n  "always",\n  {\n    "block": {\n      "balanced": true,\n      "exceptions": ["-", "+"],\n      "markers": ["=", "!", ":", "::"]\n    },\n    "line": { "exceptions": ["-", "+"], "markers": ["=", "!", "/"] }\n  }\n]\n',
                level: "error",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "standard/array-bracket-even-spacing": {
    description: "Enforce consistent spacing inside array brackets",
    docsUrl: "https://github.com/standard/eslint-plugin-standard",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "standard/computed-property-even-spacing": {
    description: "Enforce consistent spacing inside computed property brackets",
    docsUrl: "https://github.com/standard/eslint-plugin-standard",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "standard/object-curly-even-spacing": {
    description: "Enforce consistent spacing inside braces",
    docsUrl: "https://github.com/standard/eslint-plugin-standard",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  strict: {
    description: "Require or disallow strict mode directives",
    docsUrl: "https://eslint.org/docs/rules/strict",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error", "never"]\n', level: "error" },
              ts: { entry: '["error", "never"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "switch-colon-spacing": {
    description: "Enforce spacing around colons of switch statements",
    docsUrl: "https://eslint.org/docs/rules/switch-colon-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "symbol-description": {
    description: "Require symbol descriptions",
    docsUrl: "https://eslint.org/docs/rules/symbol-description",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/classnames-order": {
    description:
      "Enforces a consistent order of the Tailwind CSS classnames and its variants",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/classnames-order.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/enforces-negative-arbitrary-values": {
    description: "Warns about `-` prefixed classnames using arbitrary values",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/enforces-negative-arbitrary-values.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/enforces-shorthand": {
    description: "Replaces multiple Tailwind CSS classnames by their shorthand",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/enforces-shorthand.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/migration-from-tailwind-2": {
    description: "Detect obsolete classnames when upgrading to Tailwind CSS v3",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/migration-from-tailwind-2.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/no-arbitrary-value": {
    description: "Forbid using arbitrary values in classnames",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-arbitrary-value.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/no-contradicting-classname": {
    description: 'Avoid contradicting Tailwind CSS classnames (`"w-3 w-5"`)',
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-contradicting-classname.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "tailwindcss/no-custom-classname": {
    description: "Detect classnames which do not belong to Tailwind CSS",
    docsUrl:
      "https://github.com/francoismassart/eslint-plugin-tailwindcss/tree/master/docs/rules/no-custom-classname.md",
    usedBy: {
      tailwindcss: {
        versions: [
          {
            values: {
              js: { entry: '["warn"]\n', level: "warn" },
              ts: { entry: '["warn"]\n', level: "warn" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "template-curly-spacing": {
    description:
      "Require or disallow spacing around embedded expressions of template strings",
    docsUrl: "https://eslint.org/docs/rules/template-curly-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "template-tag-spacing": {
    description:
      "Require or disallow spacing between template tags and their literals",
    docsUrl: "https://eslint.org/docs/rules/template-tag-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "unicode-bom": {
    description: "Require or disallow Unicode byte order mark (BOM)",
    docsUrl: "https://eslint.org/docs/rules/unicode-bom",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "unicorn/empty-brace-spaces": {
    description: "Enforce no spaces between braces",
    docsUrl:
      "https://github.com/sindresorhus/eslint-plugin-unicorn/tree/main/docs/rules/empty-brace-spaces.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "unicorn/no-nested-ternary": {
    description: "Disallow nested ternary expressions",
    docsUrl:
      "https://github.com/sindresorhus/eslint-plugin-unicorn/tree/main/docs/rules/no-nested-ternary.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "unicorn/number-literal-case": {
    description: "Enforce proper case for numeric literals",
    docsUrl:
      "https://github.com/sindresorhus/eslint-plugin-unicorn/tree/main/docs/rules/number-literal-case.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "use-isnan": {
    description: "Require calls to `isNaN()` when checking for `NaN`",
    docsUrl: "https://eslint.org/docs/rules/use-isnan",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "valid-typeof": {
    description: "Enforce comparing `typeof` expressions against valid strings",
    docsUrl: "https://eslint.org/docs/rules/valid-typeof",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: {
                entry: '["error", { "requireStringLiterals": true }]\n',
                level: "error",
              },
              ts: {
                entry: '["off", { "requireStringLiterals": true }]\n',
                level: "off",
              },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vars-on-top": {
    description:
      "Require `var` declarations be placed at the top of their containing scope",
    docsUrl: "https://eslint.org/docs/rules/vars-on-top",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/array-bracket-newline": {
    description:
      "Enforce linebreaks after opening and before closing array brackets in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/array-bracket-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/array-bracket-spacing": {
    description:
      "Enforce consistent spacing inside array brackets in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/array-bracket-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/array-element-newline": {
    description: "Enforce line breaks after each array element in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/array-element-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/arrow-spacing": {
    description:
      "Enforce consistent spacing before and after the arrow in arrow functions in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/arrow-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/block-spacing": {
    description:
      "Disallow or enforce spaces inside of blocks after opening block and before closing block in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/block-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/block-tag-newline": {
    description:
      "Enforce line breaks after opening and before closing block-level tags",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/block-tag-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/brace-style": {
    description: "Enforce consistent brace style for blocks in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/brace-style.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/comma-dangle": {
    description: "Require or disallow trailing commas in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/comma-dangle.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/comma-spacing": {
    description:
      "Enforce consistent spacing before and after commas in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/comma-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/comma-style": {
    description: "Enforce consistent comma style in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/comma-style.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/dot-location": {
    description:
      "Enforce consistent newlines before and after dots in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/dot-location.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/func-call-spacing": {
    description:
      "Require or disallow spacing between function identifiers and their invocations in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/func-call-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-closing-bracket-newline": {
    description:
      "Require or disallow a line break before tag's closing brackets",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-closing-bracket-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-closing-bracket-spacing": {
    description: "Require or disallow a space before tag's closing brackets",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-closing-bracket-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-end-tags": {
    description: "Enforce end tag style",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-end-tags.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-indent": {
    description: "Enforce consistent indentation in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-indent.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-quotes": {
    description: "Enforce quotes style of HTML attributes",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-quotes.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/html-self-closing": {
    description: "Enforce self-closing style",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/html-self-closing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/key-spacing": {
    description:
      "Enforce consistent spacing between keys and values in object literal properties in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/key-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/keyword-spacing": {
    description:
      "Enforce consistent spacing before and after keywords in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/keyword-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/max-attributes-per-line": {
    description: "Enforce the maximum number of attributes per line",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/max-attributes-per-line.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/max-len": {
    description: "Enforce a maximum line length in `.vue` files",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/max-len.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/multiline-html-element-content-newline": {
    description:
      "Require a line break before and after the contents of a multiline element",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/multiline-html-element-content-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/multiline-ternary": {
    description:
      "Enforce newlines between operands of ternary expressions in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/multiline-ternary.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/mustache-interpolation-spacing": {
    description: "Enforce unified spacing in mustache interpolations",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/mustache-interpolation-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/no-extra-parens": {
    description: "Disallow unnecessary parentheses in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/no-extra-parens.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/no-multi-spaces": {
    description: "Disallow multiple spaces",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/no-multi-spaces.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/no-spaces-around-equal-signs-in-attribute": {
    description: "Disallow spaces around equal signs in attribute",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/no-spaces-around-equal-signs-in-attribute.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/object-curly-newline": {
    description:
      "Enforce consistent line breaks after opening and before closing braces in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/object-curly-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/object-curly-spacing": {
    description: "Enforce consistent spacing inside braces in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/object-curly-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/object-property-newline": {
    description:
      "Enforce placing object properties on separate lines in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/object-property-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/operator-linebreak": {
    description:
      "Enforce consistent linebreak style for operators in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/operator-linebreak.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/quote-props": {
    description:
      "Require quotes around object literal property names in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/quote-props.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/script-indent": {
    description: "Enforce consistent indentation in `<script>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/script-indent.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/singleline-html-element-content-newline": {
    description:
      "Require a line break before and after the contents of a singleline element",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/singleline-html-element-content-newline.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/space-in-parens": {
    description:
      "Enforce consistent spacing inside parentheses in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/space-in-parens.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/space-infix-ops": {
    description: "Require spacing around infix operators in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/space-infix-ops.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/space-unary-ops": {
    description:
      "Enforce consistent spacing before or after unary operators in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/space-unary-ops.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "vue/template-curly-spacing": {
    description:
      "Require or disallow spacing around embedded expressions of template strings in `<template>`",
    docsUrl:
      "https://github.com/vuejs/eslint-plugin-vue/tree/master/docs/rules/template-curly-spacing.md",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "wrap-iife": {
    description: "Require parentheses around immediate `function` invocations",
    docsUrl: "https://eslint.org/docs/rules/wrap-iife",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "wrap-regex": {
    description: "Require parenthesis around regex literals",
    docsUrl: "https://eslint.org/docs/rules/wrap-regex",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  "yield-star-spacing": {
    description:
      "Require or disallow spacing around the `*` in `yield*` expressions",
    docsUrl: "https://eslint.org/docs/rules/yield-star-spacing",
    usedBy: {
      prettier: {
        versions: [
          {
            values: {
              js: { entry: '["off"]\n', level: "off" },
              ts: { entry: '["off"]\n', level: "off" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
  yoda: {
    description: 'Require or disallow "Yoda" conditions',
    docsUrl: "https://eslint.org/docs/rules/yoda",
    usedBy: {
      base: {
        versions: [
          {
            values: {
              js: { entry: '["error"]\n', level: "error" },
              ts: { entry: '["error"]\n', level: "error" },
            },
            version: "1.0.0",
          },
        ],
      },
    },
  },
};
